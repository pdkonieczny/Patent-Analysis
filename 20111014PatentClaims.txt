PatentNumber=5802043,What is claimed is:



1. In a communications network including a domain containing a plurality of nodes connected in a ring or in a virtual ring, a method of providing a virtual mesh connectivity of digital information between source nodes and destination nodes among the nodes, comprising steps of:



transmitting into the domain a multiplex frame of the digital information from a domain controller node, the multiplex frame consisting of containers which are respectively allocated to the destination nodes, each container having partitions which are respectively allocated to source nodes;



loading the digital information at one or more source nodes into the respective partitions of the containers which are allocated to destination nodes; and



unloading the digital information at one or more destination nodes from said containers.



2. The method according to claim 1, comprising further steps of:



varying the sizes of any one or any number of the following:



the multiplex frame, containers and partitions, in order to adjust the capacity of connections.



3. The method according to claim 2 wherein the containers are in a fixed unit size, comprising a further step of:



varying the sizes of either or both of the multiplex frame and partitions, in order to adjust the capacity of connections.



4. The method according to claim 2 wherein the step of varying the sizes comprises a step of:



varying the number of containers allocated to a destination node in a multiplex frame in order to adjust the capacity of a connection.



5. The method according to claim 2 wherein the multiplex frame and containers are in fixed unit sizes, comprising a further step of:



varying the sizes of partitions, in order to adjust the capacity of connections.



6. The method according to claim 2 wherein the step of varying the sizes is performed in response to a control signal exchanged among the source node, the domain controller node and the destination node.



7. The method according to claim 3 wherein the step of varying the sizes is performed in response to a control signal exchanged among the source node, the domain controller node and the destination node.



8. The method according to claim 4 wherein the step of varying the number of containers is performed in response to a control signal exchanged among the source node, the domain controller node and the destination node.



9. The method according to claim 5 wherein the step of varying the sizes is performed in response to a control signal exchanged among the source node, the domain controller node and the destination node.



10. The method according to claim 1, wherein the step of transmitting a multiplex frame further comprises steps of:



providing respective containers at locations indicative of the destination nodes within the multiplex frame; and



providing respective partitions at locations indicative of the source nodes within the container.



11. The method according to claim 4, wherein the step of transmitting a multiplex frame further comprises steps of:



providing respective containers at locations indicative of the destination nodes within the multiplex frame; and



providing respective partitions at locations indicative of the source nodes within the container.



12. The method according to claim 5, wherein the step of transmitting a multiplex frame further comprises steps of:



providing respective containers at locations indicative of the destination nodes within the multiplex frame; and



providing respective partitions at locations indicative of the source nodes within the container.



13. The method according to claim 1 wherein the steps of loading and unloading digital information comprises steps of:



loading at the source node and unloading at one or more destination nodes the digital information in its native form.



14. The method according to claim 13 wherein the native form is any of the following: Ethernet, Frame Relay, Token Ring and ATM.



15. The method according to claim 4 wherein the steps of loading and unloading digital information comprises steps of:



loading at the source node and unloading at one or more destination nodes the digital information in its native form.



16. The method according to claim 15 wherein the native form is any of the following: Ethernet, Frame Relay, Token Ring and ATM.



17. The method according to claim 5 wherein the steps of loading and unloading digital information comprises steps of:



loading at the source node and unloading at one or more destination nodes the digital information in its native form.



18. The method according to claim 17 wherein the native form is any of the following: Ethernet, Frame Relay, Token Ring and ATM.



19. The method according to claim 1 wherein there are two or more domains and there are nodes which are connected to two or more domains so that all the domains are connected to each other, comprising a further step of:



transmitting into a respective domain a multiplex frame of the digital information from a respective domain controller node.



20. The method according to claim 19 wherein the two or more domains are arranged in a hierarchical order.



21. A node in a communication network which provides a virtual mesh connectivity among nodes in a domain by means of multiplex frames of digital information, each multiplex frame consisting of containers which are respectively allocated to destination nodes, each container having partitions which are respectively allocated to source nodes, comprising:



a container packer for loading the digital information into the partition allocated to it, of the container allocated to the destination node to which the digital information is destined; and



a container unpacker for unloading the digital information from the container allocated to it.



22. The node according to claim 21, further comprising a networking device for arranging and storing digital information according to nodes to which it is destined and from which it has arrived.



23. The node according to claim 22, wherein the network device further comprises a storage device for storing digital information to and from the container packer and unpacker.



24. The node according to claim 23, further comprising:



a traffic controller for communicating with its container packer and unpacker as to the status of the storage device and with the traffic controller of other nodes for establishing the route between the source and destination nodes.



25. A communications network for providing a virtual mesh connectivity of digital information between source nodes and destination nodes, comprising:



all the nodes residing in a domain and being connected in a ring or a virtual ring, one node being a domain controller node;



the domain controller node including a transmitter for transmitting a multiplex frame of digital information into the ring, the multiplex frame consisting of containers which are respectively allocated to the destination nodes, each container having partitions which are respectively allocated to the source nodes;



each source node having a container packer for loading the digital information into the partition allocated to it, of the container allocated to the destination node to which the digital information is destined; and



each destination node having a container unpacker for unloading the digital information from the container allocated to it.



26. The communications network according to claim 25, wherein each node has a container packer and a container unpacker to become a source node and destination node.



27. The communications network according to claim 26, wherein each node has a networking device for arranging and storing digital information according to nodes to which they are destined and from which they have arrived.



28. The communications network according to claim 27, wherein the network device of each node includes a storage device for storing digital information to and from the container packer and unpacker.



29. The communications network according to claim 28, including a traffic controller for communicating with its container packer and unpacker as to the status of the storage device and with the traffic controller of other nodes for establishing the route between the source and destination nodes.

PatentNumber=5878228,We claim:



1. A method of operating a data transfer server, comprising the steps of:



defining a circular ordering of individual scheduling timeslots having zero or more download records, each of which includes information of remaining data to transfer from identified data, a transfer rate and a destination address;



selecting in sequence, at a predetermined rate, the individual scheduling timeslots; and



servicing, responsive to the selected timeslot having at least one download record, each record therein by:



(i) sending, to the destination address, a download message which includes a block of data extracted from the identified data, based on the remaining data information;



(ii) updating the remaining data information to reflect the block of data that was sent; and



(iii) resheduling, based on the transfer rate and the predetermined rate, the download record into an appropriate one of the scheduling timeslots;



whereby, in the servicing of each download record, successive download messages having respective blocks of data extracted from the identified data are sent at a rate less than or substantially equal to the transfer rate in that record.



2. A method as claimed in claim 1, wherein the circular ordering of individual scheduling timeslots is a circular queue of the scheduling timeslots, each of which is data structure formatted as a list of the zero or more download records.



3. A method as claimed in claim 1, comprising the steps of:



receiving a download request message which references the identified data and specifies the transfer rate;



generating, responsive to confirming the identified data is available, a corresponding download record; and



inserting the corresponding download record into one of the scheduling timeslots.



4. A method as claimed in claim 3, wherein the identified data is available on a storage device; and further comprising:



loading the identified data from the storage device into a cache memory; and



extracting, in the servicing of the corresponding download record, each block of data from the identified data in the cache memory.



5. A method as claimed in claim 4, comprising the step of:



generating a unique edition number associated with the identified data;



storing the edition number with the identified data loaded into the cache memory; and



providing the edition number in each download message whose block of data is extracted from the identified data in the cache memory.



6. A method as claimed in claim 5, comprising providing in each download message an indication of position for its block of data within the identified data.



7. A method as claimed in claim 1, wherein the step of rescheduling the download record includes:



discarding, responsive to the remaining data information indicating all the identified data has been transferred, the download record; and



inserting, responsive to the remaining data information indicating otherwise, the download record in the appropriate one of the scheduling timeslots.



8. A method as claimed in claim 3, wherein the download request message specifies the transfer rate by indicating a minimum interval period between sending the successive download messages.



9. A method as claimed in claim 3, wherein the download request message specifies a transfer unit size; and the step of sending the download message includes:



extracting, from the identified data, the block of data having a size less than or substantially equal to the transfer unit size; and



constructing the download message which includes the block of data and the destination address.



10. A data transfer server, comprising:



means for defining a circular ordering of individual scheduling timeslots having zero or more download records, each of which includes information of remaining data to transfer from identified data, a transfer rate and a destination address;



means for selecting in sequence, at a predetermined rate, the individual scheduling timeslots; and



means for servicing, responsive to the selected timeslot having at least one download record, each record therein, the means for servicing including:



(i) means for sending, to the destination address, a download message which includes a block of data extracted from the identified data, based on the remaining data information;



(ii) means for updating the remaining data information to reflect the block of data that was sent; and



(iii) means for resheduling, based on the transfer rate and the predetermined rate, the download record into an appropriate one of the scheduling timeslots;



whereby, in the servicing of each download record, successive download messages having respective blocks of data extracted from the identified data are sent at a rate less than or substantially equal to the transfer rate in that record.



11. A data transfer server as claimed in claim 10, wherein the circular ordering of individual scheduling timeslots is a circular queue of the scheduling timeslots, each of which is data structure formatted as a list of the zero or more download records.



12. A data transfer server as claimed in claim 10, comprising:



means for receiving a download request message which references the identified data and specifies the transfer rate;



means for generating, responsive to confirming the identified data is available, a corresponding download record; and



means for inserting the corresponding download record into one of the scheduling timeslots.



13. A data transfer server as claimed in claim 12, wherein the identified data is available on a storage device; and further comprising:



means for loading the identified data from the storage device into a cache memory; and



means for extracting, in the servicing of the corresponding download record, each block of data from the identified data in the cache memory.



14. A data transfer server as claimed in claim 13, comprising:



means for generating a unique edition number associated with the identified data;



means for storing the edition number with the identified data loaded into the cache memory; and



means for providing the edition number in each download message whose block of data is extracted from the identified data in the cache memory.



15. A data transfer server as claimed in claim 14, comprising means for providing in each download message an indication of position for its block of data within the identified data.



16. A data transfer server as claimed in claim 10, wherein means for rescheduling the download record includes:



means for discarding, responsive to the remaining data information indicating all the identified data has been transferred, the download record; and



means for inserting, responsive to the remaining data information indicating otherwise, the download record in the appropriate one of the scheduling timeslots.



17. A data transfer server as claimed in claim 12, wherein the download request message specifies the transfer rate by indicating a minimum interval period between sending the successive download messages.



18. A data transfer server as claimed in claim 12, wherein the download request message specifies a transfer unit size; and the means for sending the download message includes:



means for extracting, from the identified data, the block of data having a size less than or substantially equal to the transfer unit size; and



means for constructing the download message which includes the block of data and the destination address.

PatentNumber=6014707,We claim:



1. In communication a server and a client within a data processing system, a method of transferring data from the server to the client comprising the steps of:



requesting, by the client, transfer of the data in accordance with a transfer unit size specified by the client;



specifying by the client a predetermined time period;



transmitting, by the server, the data in successive blocks having a size based on the client specified transfer unit size, till all the data has been transferred; and



delaying at least the predetermined time period between transmission of successive blocks.



2. A method as claimed in claim 1, wherein the size of each transmitted block is less than or substantially equal to the client specified transfer unit size.



3. A method as claimed in claim 2, wherein the step of requesting transfer of the data includes sending a transfer request message which identifies a file having the data and specifies the transfer unit size.



4. A method as claimed in claim 3, wherein the successive blocks of data are transmitted in respective download messages to the client, each download message includes an indication of position for its block of data within the file.



5. A method as claimed in claim 4, wherein each download message includes an indication of number of bytes in its block of data.



6. A method as claimed in claim 5, wherein each download message includes an indication of edition of the file from which the block of data is taken.



7. A method as claimed in claim 1, wherein the step of requesting transfer of the data includes sending a transfer request message which identifies a file having the data and specifies the transfer unit size.



8. A method as claimed in claim 7, wherein the transfer request message specifies the predetermined time period by indicating an interval time.



9. A method as claimed in claim 8, wherein the successive blocks of data are transmitted in respective download messages to the client, each download message includes an indication of position for its block of data within the file.



10. A method as claimed in claim 9, wherein each download message includes an indication of number of bytes in its block of data.



11. A method as claimed in claim 10, wherein each download message includes an indication of edition of the file from which the block of data is taken.



12. A method as claimed in claim 4, comprising monitoring for a gap between the blocks of data received by the client; and requesting, responsive to detecting the gap, transfer of at least missing data corresponding to the detected gap.



13. A method as claimed in claim 12, comprising sending by the server, in response to a request from the client, size information in relation to the file.



14. A method as claimed in claim 13, comprising allocating, by the client, a buffer in accordance with the size information received from the server.



15. A method of controlling a client, adapted to communicate with a server for transferring data from the server, comprising the steps of:



sending a transfer request message to the server, the transfer request message including an identification of the data and an indication of a transfer unit size, an indication of an interval time and the identification of the data including an identifier of a file having the data;



receiving successive download messages having respective blocks of data from the identified data; and



combining the respective blocks whereby the identified data is reconstructed at the client.



16. A method as claimed in claim 15, wherein each download message includes an indication of position for its block of data within the identified data; and the step of combining the respective blocks of data includes ordering the data blocks in sequence according to the position indications.



17. A method as claimed in claim 15, wherein the identification of the data includes an indication of a range of data in the file that is to be transferred.



18. A method as claimed in claim 17, wherein the range indication includes a total number of bytes of data.



19. A method as claimed in claim 18, wherein the range indication includes an offset from a first data byte of the file, the offset defining where in the file the transfer of data begins.



20. A method as claimed in claim 15, comprising monitoring for a gap between the received blocks of data received; and requesting, responsive to detecting the gap, transfer of at least missing data corresponding to the detected gap.



21. A method of controlling a server, adapted to communicate with a client for transferring data to the client, comprising the steps of:



receiving a transfer request message from the client, the transfer request message including an identification of the data, an indication of a transfer unit size, and an indication of an interval time;



selecting a predetermined time period based on the indicated interval time;



transmitting successive download messages having respective blocks of data from the identified data, the bocks having a size based on the indicated transfer unit size; and



delaying at least the predetermined time period between transmission of successive download messages.



22. A method as claimed in claim 21, wherein the size of each block of data is less than or substantially equal to the transfer unit size indicated in the transfer request message.



23. A method as claimed in claim 22, comprising providing in each download message an indication of position within the identified data for the block of data in that message.



24. A method as claimed in claim 23, comprising providing in each download message an indication of number of bytes within the block of data in that message.



25. A method as claimed in claim 24, comprising providing in each download message an indication of edition of the identified data from which the block of data in that message was taken.



26. A data processing platform, adapted to communicate with a server for transferring data from the server, comprising:



means for sending a transfer request message to the server, the transfer request message including an identification of the data, an indication of a transfer unit size, and an indication of an interval time;



means for receiving successive download messages having respective blocks of data from the identified data;



means for monitoring for a gap between the respective blocks of data received;



means for requesting, responsive to detecting the gap, transfer of at least missing data corresponding to the detected gap; and



means for combining the respective blocks whereby the identified data is reconstructed at the client.



27. A data processing platform as claimed in claim 26, wherein each download message includes an indication of position for its block of data within the identified data; and the means for combining the respective blocks of data includes means for ordering the data blocks in sequence according to the position indications.



28. A data processing platform, adapted to communicate with a client for transferring data to the client, comprising:



means for receiving a transfer request message from the client, the transfer request message including an identification of the data, an indication of a transfer unit size, and an indication of an interval time;



means for selecting a predetermined time period based on the indicated interval time;



means for transmitting successive download messages having respective blocks of data from the identified data, the blocks having a size based on the indicated transfer unit size; and



means for delaying at least the predetermined time period between transmission of successive download messages.



29. A data processing platform as claimed in claim 28, wherein the size of each block of data is less than or substantially equal to the transfer unit size indicated in the transfer request message.



30. A data processing platform as claimed in claim 29, comprising means for providing in each download message an indication of position within the identified data for the block of data in that message.



31. A data processing platform as claimed in claim 30, comprising means for providing in each download message an indication of number of bytes within the block of data in that message.



32. A data processing platform as claimed in claim 31, comprising means for providing in each download message an indication of edition of the identified data from which the block of data in that message was taken.

PatentNumber=6026375,We claim:



1. A computer-implemented method for processing orders, comprising:



receiving an order associated with a mobile unit;



receiving information reflecting a location of the mobile unit;



identifying a facility capable of fulfilling the order based on an estimated time until arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order; and



transmitting information indicating the identified facility to the mobile unit.



2. The method of claim 1, wherein the step of identifying a facility capable of fulfilling the order comprises:



determining an estimated time until arrival of the mobile unit at each one of a set of facilities based on the information reflecting the location of the mobile unit;



determining an estimated time required by each one of the set of facilities to fulfill the order; and



identifying one of the set of facilities that is capable of fulfilling the order within a predetermined window of time coinciding with an estimated time of arrival of the mobile unit at the identified facility.



3. The method of claim 1, further comprising:



scheduling fulfillment of the order to coincide with the mobile unit's estimated time of arrival at the identified facility.



4. The method of claim 3, wherein the step of scheduling fulfillment of the order includes:



determining components of the order; and



processing each of the components to coincide with the mobile unit's estimated time of arrival at the identified facility.



5. The method of claim 3, wherein the step of scheduling fulfillment of the order comprises:



beginning to complete the order when the estimated time until arrival of the mobile unit at the identified facility equals the amount of time needed by the identified facility to fulfill the order.



6. The method of claim 1, further comprising:



transmitting order confirmation information to a customer associated with the order.



7. The method of claim 6, wherein the order confirmation information includes identified facility information.



8. The method of claim 6, wherein the order confirmation information includes



information used to secure payment for the order.



9. The method of claim 1, wherein the order includes customer identifying information, further comprising:



storing the customer identifying information associated with the order.



10. The method of claim 9, further comprising:



determining a customer preference profile based on the customer identifying information.



11. The method of claim 10, further comprising:



preparing the order using the customer preference profile.



12. The method of claim 10, further comprising:



offering the customer certain items based on the customer preference profile.



13. The method of claim 9, wherein the customer identifying information includes customer payment information.



14. The method of claim 13, further comprising:



obtaining payment according to the customer payment information.



15. The method of claim 14, wherein the payment includes a non-monetary form of payment.



16. The method of claim 1, further comprising:



receiving customer payment information associated with the order.



17. The method of claim 16, wherein receiving customer payment information includes receiving electronic payment for the order.



18. The method of claim 1, wherein the step of identifying a facility capable of fulfilling the order includes:



determining components of the order; and



identifying a facility from among a plurality of available facilities that can process the order using the components.



19. The method of claim 1, wherein the step of receiving information reflecting a location of the mobile unit includes:



repeatedly receiving information reflecting a location of the mobile unit periodically.



20. The method of claim 1, further comprising:



repeatedly transmitting order status information to the mobile unit periodically.



21. The method of claim 20, wherein the order status information is periodically updated based on the information reflecting the location of the mobile unit.



22. A computer-implemented method for processing orders, comprising:



receiving an order from a personal assistant agent acting on behalf of a customer, wherein the order includes customer identifying information;



receiving information reflecting a location of a mobile unit associated with the order;



identifying a facility capable of fulfilling the order, based on an estimated time until arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order; and



transmitting information describing the determined facility to the mobile unit.



23. The method of claim 22, wherein the step of identifying a facility capable of fulfilling the order comprises:



determining an estimated time until arrival of the mobile unit at each one of a set of facilities based on the information reflecting the location of the mobile unit;



determining an estimated time required by each one of the set of facilities to fulfill the order; and



identifying one of the set of facilities that is capable of fulfilling the order within a predetermined window of time coinciding with the estimated time of arrival of the mobile unit at the identified facility.



24. A computer-implemented method for processing orders, comprising:



receiving an order from a personal assistant agent on behalf of a mobile customer, wherein the order includes customer identifying information; and



identifying a facility capable of fulfilling the order from among a plurality of facilities based on the customer's desired time for fulfillment of the order and an estimated time required by the facility to fulfill the order.



25. A computer-implemented method for placing orders, comprising:



transmitting an order associated with a customer from a mobile unit;



transmitting information reflecting a location of the mobile unit; and



receiving information identifying a facility able to fulfill the order, the identified facility having been identified based on an estimated time until arrival of the mobile unit at the the facility and an estimated time required by the facility to process the order, wherein the estimated time until arrival of the mobile unit is derived at least in part from the information reflecting the location of the mobile unit.



26. The method of claim 25, further comprising:



receiving order confirmation information.



27. The method of claim 26, wherein the order confirmation information includes



information used to secure payment for the order.



28. The method of claim 27, further comprising:



transmitting order payment information.



29. The method of 28, wherein the order payment information includes payment for the order.



30. The method of claim 29, wherein the payment includes a non-monetary form of payment.



31. The method of claim 25, further comprising:



transmitting order payment information to a financial system associated with the customer.



32. The method of claim 25, further comprising:



receiving order status information.



33. The method of 32, wherein the order status information is periodically updated based on the information reflecting the location of the mobile unit.



34. A system for processing orders comprising:



a memory having program instructions that



receive an order associated with a mobile unit,



receive information reflecting a location of the mobile unit,



identify a facility capable of fulfilling the order based on a time of arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order, and



transmit information describing the determined facility to the mobile customer; and



a processor for executing the program instructions.



35. The system of claim 34, wherein the program instructions to identify a facility include program instructions that



determine an estimated time until arrival of the mobile unit at each one of a set of facilities based on the information reflecting the location of the mobile unit,



determine an estimated time required by each one of the set of facilities to fulfill the order, and



identify one of the facilities that is capable of fulfilling the order within a predetermined window of time coinciding with estimated time of arrival of the mobile unit at the identified facility.



36. The system of claim 34, wherein the memory includes program instructions that



schedule fulfillment of the order to coincide with an estimated time of arrival of the mobile unit at the identified facility.



37. The system of claim 36, wherein the program instructions that identify a facility capable of fulfilling the order include program instructions that



determine components of the order; and



identify a facility from among a plurality of available facilities that can process the order using the components.



38. The system of claim 34, wherein the memory further comprises program instructions that



transmit order confirmation information to a customer associated with the order.



39. The system of claim 38, wherein the order confirmation information includes



information used to secure payment for the order.



40. The system of claim 34, wherein the order includes customer identifying information, the memory further comprising program instructions that



store the customer identifying information associated with the order.



41. The system of claim 40, wherein the memory further comprises program instructions that



determine a customer preference profile based on the customer identifying information.



42. The system of claim 41, wherein the memory further comprises program instructions that



prepare the order according to the customer preference profile.



43. The system of claim 41, wherein the memory further comprises program instructions that



offer the consumer certain items based on the customer preference profile.



44. The system of claim 40, wherein the customer identifying information includes customer payment information.



45. The system of claim 44, wherein the memory further comprises program instructions that



obtain payment according to the customer payment information.



46. The system of claim 45, wherein the payment obtained includes a non-monetary form of payment.



47. The system of claim 34, wherein the memory further comprises program instructions that



receive customer payment information associated with the order.



48. The system of claim 47, wherein the program instructions to receive customer payment information include program instructions that



receive electronic payment for the order.



49. The system of claim 34, wherein program instructions to identify a facility capable of fulfilling the order include program instructions that



determine components of the order and



identify a facility from among a plurality of available facilities that can process the order using the components.



50. The system of claim 34, wherein the program instructions to receive information reflecting a location of the mobile unit include program instructions that



receive mobile unit location information periodically.



51. A system for processing orders, comprising:



a memory having program instructions that



receive an order from a personal assistant agent acting on behalf of a customer, wherein the order includes customer identifying information,



receive information reflecting a location of a mobile unit associated with the order,



identify a facility capable of fulfilling the order based on an estimated time until arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order, and



transmit information describing the identified facility to the mobile unit; and



a processor for executing the program instructions.



52. The system of claim 51, wherein the program instructions that identify a facility capable of fulfilling the order include program instructions that



determine an estimated time until arrival of the mobile unit at each one of a set of facilities based on the information reflecting the location of the mobile unit



determine an estimated time required by each one of the set of facilities to fulfill the order, and



identify which one of the set of facilities is capable of fulfilling the order within a predetermined window of time coinciding with the mobile unit's estimated time of arrival at the facility.



53. A system for processing orders comprising:



a memory having program instructions that



receive an order from a personal assistant agent on behalf of a mobile customer, wherein the order includes customer identifying information and



identify a facility capable of fulfilling the order from among a plurality of facilities based on the customer's desired time for fulfillment of the order and an estimated time required by the facility to fulfill the order; and



a processor for executing the program instructions.



54. A system for placing orders with a service provider, comprising:



a memory having program instructions that



transmit an order associated with a customer to a service provider from a mobile unit;



transmit information to the service provider reflecting a location of the mobile unit; and



receive information identifying a facility that is able to fulfill the order, the identified facility having been identified based on an estimated time until arrival of the mobile unit at the the facility and an estimated time required by the facility to process the order, wherein the estimated time until arrival of the mobile unit is derived at least in part from the information reflecting the location of the mobile unit; and



a processor for executing the program instructions.



55. The system of claim 54, wherein the memory further comprises program instructions that



receive order confirmation information from the service provider.



56. The system of claim 55, wherein order confirmation information includes



information used to secure payment for the order.



57. The system of claim 54, wherein the memory further comprises program instructions that



transmit order payment information.



58. The system of claim 54, wherein the order payment information further includes payment for the order.



59. The system of claim 58, wherein payment includes non-monetary form of payment.



60. The system of claim 54, wherein the memory further comprises program instructions that



transmit order payment information to a financial system associated with the customer.



61. A method for using a computer to process orders comprising:



inputting into the computer an order associated with a mobile unit, the order including customer identifying information;



inputting into the computer information reflecting a location of the mobile unit;



identifying a facility from among a plurality of facilities capable of fulfilling the order based on an estimated time until arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order; and



transmitting information indicating the identified facility to the mobile unit.



62. A system for using a computer to processing orders comprising:



a memory having program instructions that enable inputting into the computer of an order associated with a mobile unit, the order including customer identifying information, enable inputting into the computer information reflecting a location of the mobile unit, and identify a facility capable of fulfilling the order based on an estimated time until arrival of the mobile unit at the facility derived at least in part from the information reflecting the location of the mobile unit and an estimated time required by the facility to process the order, and transmit information indicating the identified facility to the mobile unit; and



a processor for executing the program instructions.



63. A memory for storing data for access by a process being executed by a processor, the memory comprising:



a structure for maintaining information associated with an order corresponding to a mobile unit, wherein the information includes data representing a customer and data identifying a facility capable of fulfilling the order based on an estimated time until arrival of a mobile unit at the facility derived at least in part from information reflecting a location of the mobile unit and an estimated time required by the facility to process the order.

PatentNumber=6037937,What is claimed is:



1. A method of activating functions responsive to a user input, comprising:



providing a manipulable area portion in a physical viewing area, said manipulable area portion having at least one manipulation function associated therewith;



displaying a representation of a control tool overlaying the manipulable area portion, said control tool having at least one control tool function associated therewith;



receiving a user input to the physical viewing area corresponding to the manipulable area portion and the representation of the control tool;



determining if the user input selects the control tool; and



activating the at least one manipulation function when the user input does not select the control tool or permitting the at least one control tool function to be activated when the user input does select the control tool.



2. The method of claim 1, wherein the at least one control tool function includes a function of changing a display of information in the manipulable area portion, the method further including:



after at least one control tool function is permitted to be activated, receiving a subsequent user input selecting a predetermined portion of the control tool; and



activating the function of changing a display of information in response to the subsequent user input.



3. The method of claim 2, wherein the function of changing a display of information includes shifting information in the manipulable area portion.



4. The method of claim 3, wherein the shifting includes scrolling.



5. The method of claim 3, wherein the shifting includes jumping.



6. The method of claim 2, wherein the function of changing a display of information includes control of the speed of the change of the display of information based on the subsequent user input.



7. The method of claim 2, wherein the changing includes displaying a different one of a plurality of pages of information.



8. The method of claim 1, wherein the displaying a representation of the control tool includes displaying arrows indicating direction.



9. The method of claim 1, wherein the information displayed in the manipulable area portion includes a portion of a document and wherein the at least one control tool function includes a function related to the document.



10. The method of claim 1, wherein the displaying the representation of the control tool includes displaying a virtually transparent representation of the control tool.



11. The method of claim 1, wherein the displaying the representation of the control tool includes displaying an opaque representation of the control tool.



12. The method according to claim 1, wherein the at least one manipulation function includes an editing function for a document.



13. An apparatus for activating functions responsive to a user input, comprising:



means for providing a manipulable area portion in a physical viewing area, said manipulable area portion having at least one manipulation function associated therewith;



means for displaying a representation of a control tool overlaying the manipulable area portion, said control tool having at least one control tool function associated therewith;



means for receiving a user input to the physical viewing area corresponding to the manipulable area portion and the representation of the control tool;



means for determining if the user input selects the control tool; and



means for activating the at least one manipulation function when the user input does not select the control tool or permitting the at least one control tool function to be activated when the user input does select the control tool.



14. The apparatus of claim 13, wherein the at least one control tool function includes a function of changing a display of information in the manipulable area portion, the apparatus further including:



means for receiving a subsequent user input selecting a predetermined portion of the control tool, after at least one control tool function is permitted to be activated, and



means for activating the function of changing a display of information in response to the subsequent user input.



15. The apparatus of claim 14, wherein the function of changing a display of information includes shifting information in the manipulable area portion.



16. The apparatus of claim 15, wherein the shifting includes scrolling.



17. The apparatus of claim 15, wherein the shifting includes jumping.



18. The apparatus of claim 14, wherein the function of changing a display of information includes control of the speed of the change of the display of information based on the subsequent user input.



19. The apparatus of claim 14, wherein the changing includes displaying a different one of a plurality of pages of information.



20. The apparatus of claim 13, wherein the means for displaying a representation of the control tool includes displaying arrows indicating direction.



21. The apparatus of claim 13, wherein the information displayed in the manipulable area portion includes a portion of a document, and wherein the at least one control tool function includes a function related to the document.



22. The apparatus of claim 13, wherein the means for displaying the representation of the control tool includes displaying a virtually transparent representation of the control tool.



23. The apparatus of claim 13, wherein the means for displaying the representation of the control tool includes displaying an opaque representation of the control tool.



24. The apparatus according to claim 13, wherein the at least one manipulation function includes an editing function for a document.

PatentNumber=6088225,What is claimed is:



1. A cabinet for outdoor use for enclosing a rack of electronics equipment, the cabinet comprising:



a double skin protective outer casing for enclosing the equipment, the casing comprising:



an inner skin and an outer skin;



a lower air intake into a cavity between the skins of the double skin of the casing and an upper air output from the cavity to the outside, defining a path for unforced cooling air to flow, to extract heat from the equipment by convection; and



the inner of the skins being formed in part at least by a heat sink of the rack.



2. The cabinet of claim 1, wherein the heat sink forms at least part of a back wall of the rack, against which cards are inserted.



3. The cabinet of claim 1, wherein the cabinet further comprises the rack, and the heat sink shares a same wall of the rack as a backplane comprising connectors for connecting signals to the cards.



4. The cabinet of claim 1, having a back wall, and wherein the cabinet further comprises the rack, and the rack is arranged such that substantially the entire back wall forms the heat sink, the rack comprising:



guides for guiding cards inserted into the rack along an insertion axis, normal to the back wall and enabling subsequent movement of the cards after insertion, along a connection axis, perpendicular to the insertion axis; and



a backplane, comprising connectors for coupling to corresponding connectors on the cards, oriented perpendicular to the back wall and located to enable the coupling to take place by the subsequent movement of the cards along the connection axis.



5. The cabinet of claim 4, wherein the cabinet further comprises the rack, and the rack further comprises a mechanism for urging cards individually along the connection axis after insertion.



6. The cabinet of claim 4, the back wall further comprising:



a thermally conductive contact surface for abutting a corresponding surface on one of the cards, extending along substantially an entire leading edge of each card, for making thermally conductive contact with a card inserted in the rack.



7. The cabinet of claim 6, the heat sink and the contact surface of the back wall of the rack being formed integrally as one piece.



8. The cabinet of claim 7, wherein the cabinet further comprises the rack, and the rack is removable, the heat sink fitting in an aperture in the inner skin.



9. The cabinet of claim 1, the heat sink comprising protrusions extending into the cavity.



10. A cabinet for outdoor use for enclosing electronics equipment, the cabinet comprising:



a double skin protective outer casing for enclosing the equipment, the casing comprising:



an inner skin and an outer skin;



a lower air intake into a cavity between the skins of the double skin of the casing and an upper air output from the cavity to the outside, defining a path for unforced cooling air to flow, to extract heat from the equipment by convection; and



the inner of the skins comprising a fin extending into the cavity for promoting thermal transfer from the inner skin to the air in the cavity.



11. The cabinet of claim 10, the casing comprising a thermal insulation layer on the outer of the skins for insulating the equipment from solar radiation.



12. A cabinet for outdoor use for enclosing a rack of electronics equipment, the cabinet comprising:



a double skin protective outer casing for enclosing the equipment, the casing comprising:



an inner skin and an outer skin;



a thermal insulation layer for insulating the equipment from external conditions; and



a lower air intake into a cavity between the skins of the double skin of the casing and an upper air output from the cavity to the outside, defining a path for unforced cooling air to flow, to extract heat from the equipment by convection,



the inner of the skins of the double skin comprising a heat sink of the rack of electronics equipment, and being provided with protrusions extending into the cavity.



13. The cabinet of claim 12 the heat sink comprising a portion of a backplane of the rack.



14. The cabinet of claim 12, the thermal insulation being provided on the inside of an outer skin of the double skin.



15. A method of manufacturing a cabinet for outdoor use for enclosing a rack of electronics equipment, comprising the steps of:



making a double skin protective outer casing comprising an inner skin and outer skin for enclosing the equipment, by:



making a lower air intake into a cavity between the skins of the double skin of the casing and an upper air output from the cavity to the outside, defining a path for unforced cooling air to flow to extract heat from the equipment by convection; and



forming the inner of the skins in part at least from a heat sink of the rack.

PatentNumber=6112015,The embodiments of the invention in which an exclusive property or privilege is claimed are defined as follows:



1. A processor implemented method for displaying information relating to a telecommunications network consisting of a plurality of network objects using a networks management terminal having a display, the information consisting of base state and/or base state and supplementary state(s) information for at least one of the network objects, the method comprising the steps of:



defining a unique attribute representative of each base state, the attribute being unique independent of colour;



defining a unique modifier icon representative of each supplementary state, the modifier icon being unique independent of colour;



displaying on the display for each network object a basic icon corresponding to that network object;



for each basic icon, imparting to the basic icon the attribute representative of the base state of the corresponding network object;



for each basic icon for which there is supplementary states(s) information superimposing partially upon the basic icon one or more modifier icons representative of the supplementary state(s) of the corresponding network object;



whereby the icon representing a given network object can continuously convey the base state of the network object and its supplementary state(s) if any.



2. The method according to claim 1 wherein each network object can be in combinations of states and statuses as defined by a network management model and wherein each base state represents a predetermined state, status, or a combination of states and statuses selected from the network management model.



3. The method according to claim 1 wherein said attribute is selected from a predetermined set of attributes comprising a set of different icon borders.



4. The method according to claim 1 further comprising the step of adding text to the modifier icons to provide details of the supplementary states.



5. The method according to claim 1 wherein a different basic icon shape is used to represent each of three types of network objects, the three types being nodes, links and cards.



6. The method according to claim 5 wherein nodes are represented by a basic icon consisting of a square icon.



7. The method according to claim 5 wherein cards are represented by a basic icon consisting of a vertically oriented rectangular icon.



8. The method according to claim 5 wherein links are represented by a basic icon consisting of a link icon having thin rectangular segments.



9. The method according to claim 2 wherein more commonly occurring state, status or state/status combinations are mapped onto base states, and less commonly occurring state, status or state/status combinations are mapped onto supplementary states.



10. The method according to claim 1 wherein symbols are used on each basic icon to identify the network object represented by that basic icon.



11. The method according to claim 1 further comprising the step of displaying at least one pictorial icon for a network object, the pictorial icon being devoid of any base state or supplementary state information.



12. The method according to claim 1 further comprising the step of selecting a group of said basic icons according to a predetermined criterion and displaying a single container icon representing the group of icons rather than displaying the group of icons individually.



13. The method according to claim 12 wherein the container icons are transparent or translucent and overlay a map displayed on the display.



14. The method according to claim 12 wherein the container icons each have



a user definable shape.



15. The method according to claim 12 wherein the container icons are flexible and polygonal.



16. The method according to claim 12 wherein the container icons are imparted with icon attributes and modifier icons to reflect the base states and supplementary states of network objects represented by the container.



17. The method according to claim 12 wherein the container icons are expandable to display the icons in the group of icons represented by the container icon.



18. The method according to claim 1 further comprising the steps of:



receiving network management information;



converting the network management information into the base state for each said at least one network object.



19. The method according to claim 1 further comprising the step of expanding at least one basic icon to a larger size and displaying additional information on the icon.



20. The method according to claim 19 wherein the additional information is graphical.



21. The method according to claim 19 wherein the additional information is textual.



22. The method according to claim 2 wherein the states and statuses are a subset of those specified by the OSI standard.



23. The method according to claim 2 wherein the states and statuses are a subset of the primary states and the secondary states specified by the BellCore requirement.



24. A method for displaying OSI state and status information relating to a telecommunications network consisting of a plurality of network objects using a network management terminal having a display and processing means, the method comprising the steps of:



the processing means converting the OSI state and status information into a base state and supplementary state(s) for each network object;



defining a unique attribute representative of each base state, the attribute being unique independent of colour;



defining a unique modifier icon representative of each supplementary state, the modifier icon being unique independent of colour;



the processing means displaying on the display for each network object a basic icon representative of that network object, the basic icon being a node icon for a node network object, a card icon for a card network object, and a link icon for a link network object;



imparting to the display of at least one basic icon the attribute representative of the base state of the network object represented by the basic icon;



adding to the display of each basic icon one modifier icon partially superimposed upon the respective basic icon representative of each supplementary state of the network object represented by the basic icon;



whereby the icon representing a given network object can continuously convey the base state of the network object and its supplementary state(s) if any.



25. A method according to claim 24 wherein the node icon is a square icon, the card icon is a vertically oriented rectangular icon, and the link icon is an icon having thin rectangular segments.



26. A system for monitoring a telecommunications network consisting of a plurality of network objects, the system consisting of:



a network management terminal having a display and processing means;



means for conveying network management information from the network to the network management terminal;



memory for storing a unique attribute representative of each of a plurality of base states, the attribute being unique independent of colour and for storing a unique modifier icon representative of each of a plurality of supplementary states, the modifier icon being unique independent of colour;



wherein the processing means displays on the display for each network object a basic icon representative of that network object;



wherein the processing means converts the network management information into a base state and/or a base state and supplementary states for each of at least one network object;



wherein the processing means imparts to each basic icon representative of said at least one network object the attribute representative of the network object's base state;



wherein the processing means adds a modifier icon for each supplementary state partially superimposed over the respective basic icon.



27. The system according to claim 26 wherein the network management information consists of a state, status, or a combination of states and statuses for each said at least one network object.



28. The method according to claim 2 wherein said information further comprises alarm information, the method further comprising the steps of:



imparting to the display of each basic icon alarm modifiers which convey a summary of the alarm information.



29. The method according to claim 28 wherein said alarm information consists of a respective number of alarms for each of a number of different severities, and said summary comprises the number of alarms of the highest severity indicated alphanumerically, and whether there are additional lower severity alarms indicated symbolically.



30. The method according to claim 29 wherein said alarm information further comprises for each alarm an indication of whether the alarm is new, and wherein said summary further comprises a summary of new alarms.



31. The method according to claim 30 wherein said summary of new alarms comprises the number of new alarms of the highest severity indicated numerically in an alarm modifier icon.



32. The method according to claim 31 wherein said summary of new alarms is presented in a bubble shaped modifier icon.



33. The method according to claim 28 wherein said alarm information further includes an indication of whether there are one or more outstanding alarms, the method comprising the step of imparting an additional outline surrounding the basic icon, the additional border representing the highest severity of any outstanding alarm.



34. The method according to claim 33 further comprising the step of imparting a colour to the basic icon representing the highest severity of any outstanding or new alarm.



35. The method according to claim 1 further comprising the step of including a second basic icon displayed partially behind the basic icon for components which have both primary and secondary resources, and imparting attributes and modifier icons to the second basic icon as a function of the states of the secondary resource.



36. The method according to claim 1 wherein the state information is OSI state information and the attributes comprise:



a dashed border for the OSI state combination "disabled, idle";



a shaded border for the OSI state combination "enabled, idle"; and



a border with a three dimensional appearance for the OSI state combination "enabled, active".



37. The method according to claim 1 wherein the state and status information is OSI state and status information and the modifier icons comprise:



an icon in the shape of a lock for the OSI administrative state "locked";



an icon in the shape of a box containing a bar graph symbol for the OSI availability status "in test";



an icon in the shape of a broken stick for the OSI availability status "failed";



an icon in the shape of a power plug for the OSI availability status "power off";



an icon in the shape of a clock for the OSI availability status "off duty";



an icon in the shape of a box containing a bar graph symbol for the OSI control status "subject to test";



an icon in the shape of a box containing a bar graph symbol with a lock on it for the OSI control status "reserved for test".



38. The method according to claim 37 wherein the modifier icons further comprise:



an icon in the shape of a hand with upward pointing arrowheads for the OSI procedural status "initialization required";



an icon in the shape of upward pointing arrowheads for the OSI procedural status "initializing";



an icon in the shape of downward pointing arrowheads for the OSI procedural status "terminating";



an icon in the shape of upward pointing arrowheads and a box containing a bar graph symbol for the OSI procedural status "reporting";



an icon in the shape of an inverse shaded exclamation point for the OSI availability status "degraded".



39. The method according to claim 36 wherein the state and status information is OSI state and status information and the modifier icons comprise:



an icon in the shape of a lock for the OSI administrative state "locked";



an icon in the shape of a box containing a bar graph symbol for the OSI availability status "in test";



an icon in the shape of a broken stick for the OSI availability status "failed";



an icon in the shape of a power plug for the OSI availability status "power off";



an icon in the shape of a clock for the OSI availability status "off duty";



an icon in the shape of a box containing a bar graph symbol for the OSI control status "subject to test";



an icon in the shape of a box containing a bar graph symbol with a lock on it for the OSI control status "reserved for test".



40. The method according to claim 39 wherein the modifier icons further comprise:



an icon in the shape of a hand with upward pointing arrowheads for the OSI procedural status "initialization required";



an icon in the shape of upward pointing arrowheads for the OSI procedural status "initializing";



an icon in the shape of downward pointing arrowheads for the OSI procedural status "terminating";



an icon in the shape of upward pointing arrowheads and a box containing a bar graph symbol for the OSI procedural status "reporting";



an icon in the shape of an inverse shaded exclamation point for the OSI availability status "degraded".



41. The method according to claim 40 wherein said information further comprises alarm information, the method further comprising the steps of:



imparting to the display of each basic icon alarm modifiers which convey a summary of the alarm information.



42. The method according to claim 41 wherein said alarm information consists of a number of alarms for each of a number of different severities, and said summary comprises the number of alarms of the highest severity indicated alphanumerically, and whether there are additional lower severity alarms indicated symbolically.



43. The method according to claim 42 wherein said alarm information further comprises for each alarm an indication of whether the alarm is new, and wherein said summary further comprises a summary of new alarms.



44. The method according to claim 43 wherein said summary of new alarms comprises the number of new alarms of the highest severity indicated numerically in an alarm modifier icon.



45. The method according to claim 44 wherein said summary of unacknowledged alarms is presented in a bubble shaped modifier icon.



46. The method according to claim 41 wherein said alarm information further includes an indication of whether there are one or more outstanding alarms, the method comprising the step of imparting an additional outline surrounding the basic icon, the additional border representing the highest severity of any outstanding alarm.



47. The method according to claim 45 further comprising the step of imparting a colour to the basic icon representing the highest severity of any outstanding or new alarm.

PatentNumber=6115646,We claim:



1. A process automation system for controlling the execution of processes on a plurality of processing nodes each having processing agents associated therewith, the system comprising a GPAE (generic process automation engine) and an ORB (object request broker) bus connected to the plurality of processing nodes, the GPAE having:



a) a build time part for creating and storing at least one process definition identifying a logical sequence of work items, pre-conditions and post-conditions for the execution of work items, and propagation rules for propagating outputs of work items to inputs of other work items, and for creating and storing a request to create a process instance for a particular process definition;



b) a run time part comprising process instance servers for coordinating the enactment of the work items forming part of the process definitions and a scheduler for scheduling each work item forming part of the process definition either for execution at a given time and by a particular processing agent on a particular one of the processing nodes or for execution by a human, the scheduler using constraint propagation logic;



wherein the ORB is a CORBA bus, and the process instance servers are CORBA Process Servers that contain a set of process instance objects that control the execution of the work items forming part of the process definition for the relevant process instance.



2. A system according to claim 1 wherein the build time part stores process definitions in a persistent catalog, and wherein the process definitions are defined using an extension of the WfMC (Workflow Management Coalition) process definition language (WPDL).



3. A system according to claim 1 wherein work items to be executed by processing nodes are defined by activity definitions which are defined as objects in a persistent catalog.



4. A system according to claim 3 wherein a new process definition can be created by composing versions of existing activity or process definitions.



5. A system according to claim 3 wherein the termination of an activity becomes an event that triggers a process instance to evaluate the conditions needed to execute the next set of activities in the process definition, and interact with the scheduler to determine where and when to execute the next set of activities.



6. A system according to claim 1 wherein the multi-threaded scheduler creates a near optimal schedule in real time and considers the constraints of a set of concurrent activities, and the available resources, according to resource utilization goals.



7. A system according to claim 6 wherein the resource utilization goals may be redefined during run time.



8. A system according to claim 6 wherein the utilization goals are stored in a persistent goals catalog.



9. A system according to claim 1 further comprising a persistent store for operational data, historical data, and system state information, the operational data being used to determine further process efficiencies and to report progress, the historical data being used for root cause analysis and to audit past requests, and the system state information being used to recover GPAE from system failures and network failures.



10. A system according to claim 1 further comprising a query server which answers queries related to buildtime information (i.e., process and activity definitions) and runtime information (e.g., progress of processes' execution states).



11. A system according to claim 1 further comprising means for notifying an outcome of runtime events to interested parties by extending the CORBA's event service model.



12. A system according to claim 11 wherein the notification is done by displaying tasks to be completed by humans in a worklist menu.



13. A system according to claim 1 wherein work items requiring human execution are multicasted to worklist menus.



14. A system according to claim 1 wherein a plurality of GPAE systems, distributed in strategic geographical locations, are CORBA connected to share global processes, services and resources.



15. A process automation system for controlling the execution of processes on a plurality of processing nodes each having processing agents associated therewith, the system comprising a GPAE (generic process automation engine) and an ORB (object request broker) bus connected to the plurality of processing nodes, the GPAE having:



a) a build time part for creating and storing at least one process definition identifying a logical sequence of work items, pre-conditions and post-conditions for the execution of work items, and propagation rules for propagating outputs of work items to inputs of other work items, and for creating and storing a request to create a process instance for a particular process definition;



b) a run time part comprising process instance servers for coordinating the enactment of the work items forming part of the process definitions and a scheduler for scheduling each work item forming part of the process definition either for execution at a given time and by a particular processing agent on a particular one of the processing nodes or for execution by a human, the scheduler using constraint propagation logic;



wherein processing agents may be added, deleted or changed during run time.

PatentNumber=6192397,What is claimed is:



1. A method comprising the steps of:



(a) generating a first information associated with a first device;



(b) generating a second information associated with a second device;



(c) comparing the first information with the second information by the first device and the second device, the comparison operation generating a comparison result;



(d) designating one device as a master and one device as a slave in response to the comparison result;



(e) receiving by the slave a clock signal from the master; and



(f) returning the clock signal from the slave to the master.



2. The method of claim 1, wherein the step of generating a first information associated with the first device is performed by the first device.



3. The method of claim 1, wherein the step of generating a second information associated with the second device is performed by the second device.



4. The method of claim 1, wherein the step of generating a first information associated with the first device is performed by the first device and the step of generating a second information associated with the second device is performed by the second device.



5. The method of claim 4, wherein the step of comparing the first information with the second information includes:



transmitting the first information from the first device to the second device;



transmitting the second information from the second device to the first device; and



generating a comparison result in each device by having each device compare the first information and the second information.



6. A method for establishing a master-slave relationship at the physical layer between a first device and a second device in a peer-to-peer network, the method comprising the steps of:



(a) generating a first random number associated with the first device;



(b) generating a second random number associated with the second device;



(c) comparing the first random number with the second random number;



(d) repeating steps (a), (b), (c) if the first random number is equal to the second random number;



(e) designating the device with the higher associated random number as a master device; and



(f) designating the device with the lower associated number as a slave device;



(g) receiving by the slave device a clock signal from the master device; and



(h) returning the clock signal from the slave device to the master device.



7. The method of claim 6, wherein the step of generating a first random number associated with the first device is performed by the first device.



8. The method of claim 6, wherein the step of generating a second random number associated with the second device is performed by the second device.



9. The method of claim 6, wherein the step of generating a first random number associated with the first device is performed by the first device and the step of generating a second random number associated with the second device is performed by the second device.



10. The method of claim 9, wherein the step of comparing the first number with the second number includes:



transmitting the first number from the first device to the second device;



transmitting the second number from the second device to the first device; and



generating a comparison result in each device by having each device compare the first and second numbers.



11. A method for establishing a master-slave relationship at the physical layer between a first device and a second device in a peer-to-peer network, the method comprising the steps of:



(a) assigning a first value associated with the first device;



(b) assigning a second value associated with the second device;



(c) determining whether the first assigned value and the second assigned value are equal;



(d) designating one device as a master device and the other device as a slave device in response to their assigned values if the first assigned value is not equal to the second assigned value;



(e) designating one device as a master device and the other device as a slave device if the first assigned value is not equal to the second assigned value by performing the following steps:



generating a first random number associated with the first device;



generating a second random number associated with the second device;



comparing the first random number with the second random number and generating a comparison result;



designating one device as a master device and one device as a slave device in response to the comparison result;



receiving by the slave device a clock signal from the master device; and



returning the clock signal from the slave device to the master device.



12. The method of claim 11, wherein the step of assigning the first assigned value and the step of assigning the second assigned value are performed during an initialization of each device.



13. The method of claim 11, wherein the step of generating a first random number associated with the first device is performed by the first device.



14. The method of claim 11, wherein the step of generating a second random number associated with the second device is performed by the second device.



15. The method of claim 11, wherein the step of generating a first random number associated with the first device is performed by the first device and the step of generating a second random number associated with the second device is performed by the second device.



16. The method of claim 15, wherein the step of comparing the first number with the second number includes:



transmitting the first number from the first device to the second device;



transmitting the second number from the second device to the first device; and



generating a comparison result in each device by having each device compare the first and second numbers.



17. The method of claim 1, wherein the peer-to-peer network is an Ethernet.



18. A device comprising:



logic at a physical layer configured to (i) generate information that is retained within the device and transmitted to a remote device, (ii) compare the information to incoming information received from the remote device in order to determine a master-slave relationship between the device and the remote device and (ii) generate secondary information if the information is equal to the incoming information; and



logic of the physical layer configured to (i) transmit a first clock signal to the remote device and (ii) receive the first clock signal returned from the remote device when the device is a master device.



19. The device of claim 18, wherein the information is a first random number, the incoming information is a second random number and the secondary information is a third random number.



20. The device of claim 18 further comprising:



logic of the physical layer configured to (i) receive a second clock signal from the remote device and (ii) return the clock signal to the remote device when the device is a slave device.

PatentNumber=6198558,We claim:



1. A fiber optic communication system comprising:



a host digital terminal (HDT) for connection to a core communications network; and



at least one optical network unit (ONU) for interfacing to a corresponding plurality of subscriber loops and connected by optical fiber to the HDT;



wherein, for each subscriber loop communicating with the core network, said subscriber loop transmits analog or digital data to its corresponding ONU (and vice versa) in a corresponding one of a plurality of analog formats; said corresponding ONU transmits digital data to the HDT (and vice versa) in a common, high-bandwidth digital format; and the HDT transmits digital data to the core network (and vice versa) in a corresponding one of a plurality of digital formats;



wherein the HDT executes digital signal processing functions for converting data from any of the plurality of digital formats to the common digital format (and vice versa).



2. The system of claim 1, wherein the at least one ONU comprises a plurality of substantially identical line interface units (LIUs) for respectively interfacing to the corresponding subscriber loops, wherein the HDT comprises a digital switch matrix, a plurality of programmable digital signal processors (DSPs) connected to the digital switch matrix for executing the signal processing functions, and means to control the digital switch matrix so as to select, for each LIU, at least one first signal processing function to be executed by a first subset of the plurality of DSPs on data arriving from the core network and destined for the LIU, and at least one second signal processing function to be executed by a second subset of the plurality of DSPs on data arriving from the LIU and destined for the core network.



3. The system of claim 2, wherein the at least one ONU further comprises an optical transceiver connected to the optical fiber and a bidirectional multiplexer connected between the optical transceiver and the plurality of LIUs, each LIU having an oversampling codec, and wherein the HDT further comprises at least one first optical transceiver connected between the optical fiber and the switch matrix and at least one second optical transceiver for connection to the core network and connected to the switch matrix.



4. A system according to claim 3, wherein the HDT further comprises a plurality of interpolators placed at the respective outputs of the first subset of DSPs for increasing the rate of data destined for the LIUs of the at least one ONU, and a plurality of decimators placed at the respective inputs of the second set of DSPs for reducing the rate of data arriving from the LIUs of the at least one ONU.



5. A system according to claim 3, wherein at least one LIU further comprises a decimator and an interpolator placed between the codec and the multiplexer, wherein the decimator decreases the rate of data flowing to the multiplexer and the interpolator increases the rate of data flowing to the codec.



6. A system according to claim 3, wherein the HDT further comprises a plurality of random access memories (RAMs) that store programs run by respective DSPs.



7. A system according to claim 6, wherein the HDT further comprises a control processor for controlling the switch matrix, thereby to selectively interconnect the at least one first and second transceiver to the plurality of DSPs.



8. A system according to claim 7, wherein the control processor is connected to the RAMs and can change the respective programs, thereby to change the signal processing functions executed by the associated DSPs.



9. A system according to claim 3, wherein the HDT further comprises a loop status processor for monitoring voltage and current conditions on each of the plurality of subscriber loops.



10. A system according to claim 3, wherein the HDT further comprises an OAM processor for controlling the operation of the multiplexer in the at least one ONU.



11. A system according to claim 3, wherein the switch matrix comprises a first digital switch connected between the at least one first transceiver and the DSPs, and a second digital switch connected between the DSPs and the at least one second transceiver.



12. A system according to claim 11, wherein the first and second digital switches are connected by a bidirectional hair pin connection, whereby data output by the first digital switch may be routed to the second digital switch and data output by the second digital switch may be routed to the first digital switch, thereby to traverse the DSPs a plurality of times in sequence.



13. A system according to claim 3, wherein the at least one ONU further comprises an ONU control processor connected between the transceiver and the multiplexer for interpreting control instructions received from the HDT and for sending status information to the HDT.



14. A system according to claim 13, wherein each LIU further comprises a ringing generator, a loop status detector and an analog front end for generating and interpreting currents and voltages on the associated subscriber loop.



15. A system according to claim 14, wherein the ringing generator and loop status detector on each LIU are connected to the multiplexer of the corresponding ONU.



16. A system according to claim 14, wherein the ringing generator and loop status detector on each LIU are connected to the ONU control processor of the corresponding ONU.



17. A system according to claim 14, wherein the analog front end on each LIU interfaces to a copper twisted pair subscriber loop.



18. A system according to claim 14, wherein the analog front end on each LIU interfaces to a coaxial cable subscriber loop.



19. A system according to claim 3, wherein the HDT and at least one ONU are interconnected in a passive optical network configuration.



20. A system according to claim 3, wherein the HDT and at least one ONU are interconnected in a SONET ring configuration.



21. A system according to claim 3, wherein the HDT and at least one ONU are interconnected by point-to-point link.



22. A system according to claim 3, wherein one of the signal processing functions consists of converting mu-law encoded pulse code modulation (PCM) data samples arriving from the core network into linearly encoded data samples destined for at least one LIU in the at least one ONU.



23. A system according to claim 3, wherein one of the signal processing functions consists of converting linearly encoded data samples arriving from at least one LIU in the at least one ONU into mu-law encoded pulse code modulation (PCM) data samples destined for the core network.



24. A system according to claim 22, wherein another of the signal processing functions consists of converting linearly encoded data samples arriving from at least one LIU in the at least one ONU into mu-law encoded PCM data samples destined for the core network.



25. A system according to claim 3, wherein one of the signal processing functions consists of reassembling a Frame Relay data packet from segments of the Frame Relay data packet contained in the payload of respective ATM cells.



26. A system according to claim 3, wherein one of the signal processing functions consists of constructing a line coded DS-1 data stream from a Frame Relay data packet.



27. A system according to claim 3, wherein one of the signal processing functions consists of regenerating a DS-1 digital signal from an oversampled distorted line coded DS-1 signal.



28. A system according to claim 3, wherein one of the signal processing functions consists of extracting a Frame Relay packet from a the payload of a DS-1 data digital signal.



29. A system according to claim 3, wherein one of the signal processing functions consists of segmenting a Frame Relay data packet and inserting the segments into the payload of respective ATM cells.



30. In a fiber optic communication system comprising a host digital terminal (HDT) for connection to a core communications network and at least one optical network unit (ONU) for interfacing to a corresponding plurality of subscriber loops and connected by optical fiber to the HDT; wherein the HDT comprises a digital switch matrix and a plurality of programmable digital signal processors (DSPs) executing respective processing functions and connected to the digital switch matrix, a method of communicating data between the HDT and the at least one ONU, comprising:



in a downstream direction, the switch matrix routing data received by the HDT from the core network in any of a plurality of distinct digital formats to selected ones of the DSPs; the DSPs performing respective processing functions, yielding downstream data in a common, high-bandwidth digital format; the switch matrix routing the downstream data to the at least one ONU; and



in an upstream direction, the switch matrix routing data received from the at least one ONU in said common, high-bandwidth digital format to selected ones of the DSPs; the DSPs performing respective processing functions, yielding upstream data in at least one of said plurality of distinct digital formats; the switch matrix routing the upstream data to the core network.



31. A method according to claim 30, further comprising in the downstream direction, the switch matrix routing the downstream data back to the DSPs at least once prior to routing it to the at least one ONU; and in the upstream direction, the switch matrix routing the upstream data back to the DSPs at least once prior to routing it to the core network.



32. A method according to claim 30, further comprising in the downstream direction, the downstream data being interpolated prior to being routed to the at least one ONU; and in the upstream direction, the data received from the at least one ONU being decimated prior to being processed by the DSPs.



33. A method according to claim 30, wherein the data being sent to the at least one ONU is organized into frames, wherein each frame comprises a number of downstream subframes, wherein each downstream subframe within a frame is destined for a particular ONU and comprises a traffic field sectioned into groups of time slots, wherein each group of time slots is destined for a separate line interface unit (LIU) in said ONU, wherein each LIU provides data in a specific format to a respective subscriber, the number of time slots in a group being dependent on the specific data format provided by the associated LIU.



34. A met hod according to claim 33, wherein the data being sent by the at least one ONU is organized into upstream subframes comprising a traffic field sectioned into groups of time slots, wherein each group of time slots originates from a separate LIU in the ONU, the number of slots in a group being dependent on the specific data format provided by the associated LIU.



35. A method according to claim 33, wherein each downstream subframe further comprises a control field containing instructions for configuring a multiplexer on the ONU for which said downstream subframe is destined.



36. A method according to claim 34, wherein each downstream subframe further comprises a control field containing instructions for timing the transmission of upstream subframes by the ONU for which said downstream subframe is destined.



37. A method according to claim 33, wherein each downstream subframe further comprises an address field for identifying the ONU for which said downstream subframe is destined.



38. A method according to claim 34, wherein each upstream subframe further comprises an address field for identifying the ONU from which said upstream subframe originates.



39. A method according to claim 34, wherein pairs of upstream subframes transmitted by the at least one ONU are separated by a guard band of variable length.



40. A method according to claim 30, wherein the data received from and transmitted to the core network by the HDT is formatted by a signalling processor in the HDT.



41. A host digital terminal (HDT) for enabling bidirectional communication between a core network and at least one optical network unit (ONU) having a plurality of line interface units (LIUs), the HDT comprising:



a digital switch matrix, a plurality of programmable digital signal processors (DSPs) connected to the digital switch matrix for executing the signal processing functions;



at least on first optical transceiver connected between the optical fiber and the switch matrix;



at least one second optical transceiver for connection to the core network and connected to the switch matrix; and



means to control the digital switch matrix so as to select, for each LIU, at least one first signal processing function to be executed by a first subset of the plurality of DSPs on data arriving from the core network through the at least one second optical transceiver and destined for the LIU, and at least one second signal processing function to be executed by a second subset of the plurality of DSPs on data arriving from the LIU through the at least one first optical transceiver and destined for the core network.



42. An HDT according to claim 41, further comprising a plurality of interpolators placed at the respective outputs of the first subset of DSPs for increasing the rate of data destined for the LIUs of the at least one ONU, and a plurality of decimators placed at the respective inputs of the second set of DSPs for reducing the rate of data arriving from the LIUs of the at least one ONU.



43. An HDT according to claim 41, further comprising a plurality of random access memories (RAMs) that store programs run by respective DSPs.



44. An HDT according to claim 43, further comprising a control processor for controlling the switch matrix, thereby to selectively interconnect the at least one first and second transceiver to the plurality of DSPs.



45. An HDT according to claim 44, wherein the control processor is connected to the RAMs and can change the respective programs, thereby to change the signal processing functions executed by the associated DSPs.



46. An HDT according to claim 41, further comprising a loop status processor for monitoring voltage and current conditions on the subscriber loops.



47. An HDT according to claim 41, further comprising an OAM processor for controlling the operation of the at least one ONU.



48. An HDT according to claim 41, wherein the switch matrix comprises a first digital switch connected between the at least one first transceiver and the DSPs, and a second digital switch connected between the DSPs and the at least one second transceiver.



49. An HDT according to claim 48, wherein the first and second digital switches are connected by a bidirectional hair pin connection, whereby data output by the first digital switch is routed to the second digital switch and data output by the second digital switch is routed to the first digital switch.



50. An HDT according to claim 41, wherein one of the signal processing functions consists of converting mu-law encoded pulse code modulation (PCM) data samples arriving from the core network into linearly encoded data samples destined for at least one LIU in the at least one ONU.



51. An HDT according to claim 41, wherein one of the signal processing functions consists of converting linearly encoded data samples arriving from at least one LIU in the at least one ONU into mu-law encoded pulse code modulation (PCM) data samples destined for the core network.



52. An HDT according to claim 50, wherein another of the signal processing functions consists of converting linearly encoded data samples arriving from at least one LIU in the at least one ONU into mu-law encoded PCM data samples destined for the core network.



53. An HDT according to claim 41, wherein one of the signal processing functions consists of reassembling a Frame Relay data packet from segments of the Frame Relay data packet contained in the payload of respective ATM cells.



54. An HDT according to claim 41, wherein one of the signal processing functions consists of constructing a line coded DS-1 data stream from a Frame Relay data packet.



55. An HDT according to claim 41, wherein one of the signal processing functions consists of regenerating a DS-1 digital signal from an oversampled distorted line coded DS-1 signal.



56. An HDT according to claim 41, wherein one of the signal processing functions consists of extracting a Frame Relay packet from a the payload of a DS-1 data digital signal.



57. An HDT according to claim 41, wherein one of the signal processing functions consists of segmenting a Frame Relay data packet and inserting the segments into the payload of respective ATM cells.

PatentNumber=6202208,What is claimed is:



1. A patch environment within a Java Virtual Machine ("JVM") executing on a computer, the JVM having a loader environment containing information about software objects loaded on the computer through the JVM, the patch environment comprising:



a patch data structure defined on an electronic memory of the computer, having at least one Java patch for modifying the loader environment of the JVM, wherein the patch data structure comprising at least one method table and at least one associated method body;



at least one data item contained in the patch data structure defined on the electronic memory of the computer, identifying each patch of said patch data structure; and



a second data item associated with each of the identified patches contained in the patch data structure defined on the electronic memory of the computer for modifying the loader environment of the JVM.



2. The patch environment of claim 1 further comprising:



a link between said at least one patch and the loader environment for moving said at least one patch between the patch environment and the loader environment.



3. The patch environment of claim 1 wherein said patch data structure is an array.



4. The patch environment of claim 1 wherein said patch modifies a method body in the loader environment of the JVM by altering a method body in the loader environment.



5. The patch environment of claim 1 wherein said patch modifies a method body in the loader environment of the JVM by adding a method body in the loader environment.



6. A method of applying an ordered set of changes to an executing Java program on a computer, without interrupting the execution of the Java program, the method comprising the steps of:



(a) providing a Java Virtual Machine ("JVM") in a memory of the computer, the JVM having a loader environment wherein the Java program is loaded for execution;



(b) executing the Java program;



(c) creating a patch environment in a memory of the computer such that the patch environment can interact with the loader environment;



(d) generating a patch file having a patch;



(e) loading the patch file into the patch environment, such that the loaded patch file comprising at least one patched method table entry and at least one associated patched method body, said at least one patched method table entry having a pointer directed to said at least one associated patched method body; and



(f) applying the patch to the executing Java program.



7. The method of claim 6, wherein the step of applying the patch to the Java program includes altering a method body in the loader environment.



8. The method of claim 6, wherein the step of applying a patch to the Java program includes adding a method body.



9. A method of applying an ordered set of changes to an executing Java class file on a computer, without interrupting the execution of the Java class file, the method comprising the steps of:



(a) providing a Java Virtual Machine ("JVM") in a memory of the computer, the JVM having a loader environment wherein the Java class file is loaded for execution, the Java class file having a JVM class structure comprising at least one method table and at least one associated method body, said at least one method table having a pointer directed to said at least one associated method body;



(b) executing the Java class file;



(c) creating a patch environment in a memory of the computer such that the patch environment can interact with the loader environment;



(d) generating a patch file having a patch;



(e) loading the patch file into the patch environment, the loaded patch file being substantially similar to the class file to generate a JVM patch structure similar to the JVM class structure in the loader environment; and



(f) applying the patch to the executing Java program.



10. A method of altering an executing Java class file on a computer, without interrupting the execution of the Java class file, the method comprising the steps of:



(a) providing a Java Virtual Machine ("JVM") in a memory of the computer, the JVM having a loader environment wherein the Java class file is loaded for execution, the loaded Java class file having a JVM class structure comprising at least one method table and at least one associated method body, said at least one method table having a first pointer directed to said at least one associated method body;



(b) executing the Java class file;



(c) creating a patch environment in a memory of the computer such that the patch environment can interact with the loader environment;



(d) generating a patch file having a patch;



(e) loading the patch file into the patch environment, the loaded patch file comprising at least one associated patched method table entry and at least one patched method body, said at least one patched method table entry having a second pointer directed to said at least one associated patched method body; and



(f) replacing said at least one method body with said at least one patched method body by exchanging the first pointer with the second pointer.



11. The method of claim 10 further comprising the additional step of:



(g) restoring said at least one method body by reversing the swap of the first and second pointers.



12. A method of adding a new program component to an executing Java class file on a computer, without interrupting the execution of the Java class file, the method comprising the steps of:



(a) providing a Java Virtual Machine ("JVM") in a memory of the computer, the JVM having a loader environment wherein the Java class file is loaded for execution, the loaded Java class file having a JVM class structure comprising at least one method table and at least one associated method body, said at least one method table having a first pointer directed to said at least one associated method body;



(b) executing the Java class file;



(c) creating a patch environment in a memory of the computer such that the patch environment can interact with the loader environment;



(d) generating a patch file having a patch;



(e) loading the patch file into the patch environment, the loaded patch file comprising at least one patched method table entry and at least one associated patched method body, said at least one patched method table entry having a second pointer directed to said at least one associated patched method body; and



(f) adding said at least one patched method body to the executing Java class file by appending the second pointer to said at least one method table.

PatentNumber=6271835,What is claimed is:



1. A method for operating a touch-screen input device including a touch sensitive screen comprising the steps of:



displaying a plurality of input keys on said touch sensitive screen;



mapping a plurality of characters to each input key;



receiving a user input;



determining whether said user input designates a single character;



determining whether said user input designates a re-map command;



selecting said single character responsive to said input designating said single character; and



re-mapping said keys responsive to said input designating a re-map command; wherein the step of selecting said single character includes:



inserting an alphanumeric character or symbol into the text stream; or



performing the function represented by the selected character representing said function;



wherein said input keys are divided into a plurality of elements; and wherein said mapping step includes initially mapping single characters to particular elements; and wherein said re-map command includes receiving an input of a plurality of elements when single characters are mapped to individual elements; and wherein said re-mapping step includes mapping single characters to input keys; and wherein said input designating a single character includes an input of a particular element when a single character is mapped to said particular element, or an input of any number of elements from the same input key when a single character is mapped to said input key.



2. The method as claimed in claim 1 wherein the number of elements per input key is limited to the total number of input keys and wherein said re-map step includes re-mapping said input keys with the characters which are mapped to said selected input key, wherein each particular input key is re-mapped with the character whose position within said selected input key corresponds to the position of said input keys.



3. A method for operating a touch-screen input device including a touch sensitive screen comprising the steps of:



displaying a plurality of character keys and a plurality of assignment keys on said touch sensitive screen;



mapping a plurality of characters to each character key;



receiving a user input;



determining whether said user input designates a single character;



determining whether said user input designates a re-map command; and



selecting said single character responsive to said input designating said single character; and



re-mapping said keys responsive to said input designating a re-map command; wherein the step of selecting said single character includes:



inserting an alphanumeric character or symbol into the text stream; or



performing the function represented by the selected character representing said function;



wherein said character keys are further divided into a plurality of elements; and wherein said mapping step includes initially mapping single characters to particular elements of said character keys; and wherein said re-map command includes receiving an input of an assignment key or an input of a plurality of elements when single characters are mapped to particular elements; and wherein said re-mapping step includes mapping single character to character keys, and mapping different characters to said elements; and wherein said input designating a single character includes an input of a particular element when single characters are mapped to particular elements or an input of any number of elements from the same character key when a single character is mapped to said character key.



4. The method as claimed in claim 3 wherein the number of elements per character key is limited to the total number of character keys and wherein said re-map step responsive to an input of a plurality of elements includes re-mapping said input keys with the characters which are mapped to said selected input key, wherein each particular input key is re-mapped with the character whose position within said selected input key corresponds to the position of said input keys.



5. A touch-screen device comprising:



a touch-screen;



means for displaying on said touch-screen a plurality of input keys;



means for mapping a plurality of characters to each input key;



means for determining whether said input designates a single character or a re-map command;



means for selecting a single character responsive to an input designating a particular character; and



means for re-mapping said input keys responsive to a re-map command input;



wherein said means for selecting a character responsive to an input designating a particular character includes:



means for inserting an alphanumeric character or symbol into the text steam; and



means for performing the function represented by the selected character representing said function;



wherein said input keys are divided into a plurality of elements and wherein said means for mapping includes means for initially mapping single characters to particular elements;



wherein said means for determining comprises means for determining whether individual or multiple elements are input;



wherein said means for selecting a character further includes means for selecting a character responsive to an input of a particular element when a single character is mapped to said particular element and means for a character responsive to an input of any number of elements on the same input key when a single character is mapped to particular input key; and wherein said means for re-mapping further includes means for mapping single characters to input keys responsive to an input of a plurality of elements when single characters are mapped to particular elements.



6. A device as claimed in claim 5 wherein the number of elements per input key is limited to the total number of input keys and wherein said re-map command further includes means for re-mapping said input keys with the characters which are mapped to a selected input key, wherein each particular input key is re-mapped with the character whose position within said selected input key corresponds to the position of said input keys.



7. A touch-screen device comprising:



a touch-screen;



means for displaying on said touch-screen a plurality of character keys and a plurality of assignment keys;



means for mapping a plurality of characters to each character key;



means for determining whether said input designates a single character or a re-map command;



means for selecting a character responsive to an input designating a particular character; and



means for re-mapping said input keys responsive to a re-map command input;



wherein said means for selecting a character responsive to an input designating a particular character includes:



means for inserting an alphanumeric character or symbol into the text stream; and



means for performing the function represented by the selected character representing said function;



wherein said character keys are further divided into plurality of elements wherein said means for mapping includes means for initially mapping single character to particular elements;



wherein said means for determining comprises means for determining whether individual or multiple elements are input;



wherein said means for re-mapping further includes means for mapping single character to character keys responsive to an input of a plurality of elements when single characters are mapped to particular elements; and wherein said means for selecting a character further includes means for selecting a character responsive to an input of a particular element when a single character is mapped to said particular element and means for selecting a character responsive to an input of any number of elements on the same input key when a single character is mapped to a particular input key.



8. A device as claimed in claim 7 wherein the number of elements per character key is limited to the total number of character keys and wherein said re-map command further includes means for re-mapping said character keys with the characters which are mapped to a selected character key, wherein each character key is re-mapped with the character whose position within said selected character key corresponds to the position of said character keys.



9. A method for operating a touch-screen input device including a touch sensitive screen comprising the steps of:



displaying a plurality of input keys on said touch sensitive screen;



mapping a plurality of characters to each input key;



receiving a user input;



determining whether said user input designates a single character;



determining whether said user input designates a re-map command;



selecting said single character responsive to said input designating said single character; and



re-mapping said keys responsive to said input designating a re-map command; wherein the step of selecting said single character includes:



inserting an alphanumeric character or symbol into the text stream; or



performing the function represented by the selected character representing said function;



wherein said input keys are divided into a plurality of elements wherein said mapping step includes initially mapping single characters or character sub-arrays to particular elements; and wherein said re-map command includes receiving an input of a plurality of elements when single characters or character arrays are mapped to individual elements; and wherein an input designating a single character includes an input of a particular element when a single character is mapped to said particular element or an input of any number of elements on the same input key when a single character is mapped to said particular input key.



10. The method as claimed in claim 9 wherein said re-map command further includes:



re-mapping said input keys with single characters responsive to an input of a plurality of elements on the same input key when first order character sub-arrays are mapped to particular input keys;



re-mapping said input keys with a single character, responsive to an input of a single element when second order character sub-arrays are mapped to particular input keys;



re-mapping said input keys with character sub-arrays of one order less responsive to an input of a plurality of elements on the same input key when character sub-arrays of second order or greater are mapped to particular input keys; and



re-mapping said input keys with character sub-arrays of two orders less responsive to an input of a single element when character sub-arrays of third order or greater are mapped to particular input keys.



11. The method as claimed in claim 10 wherein the number of elements per input key is limited to the total number of input keys and wherein said re-map step includes re-mapping said input keys with the characters which are mapped to said selected input key, wherein each particular input key is re-mapped with the character whose position within said selected input key corresponds to the position of said input keys.



12. A method for operating a touch-screen input device including a much sensitive screen comprising the steps of:



displaying a plurality of character keys and a plurality of assignment keys on said touch sensitive screen;



mapping a plurality of characters to each character key;



receiving a user input;



determining whether said user input designates a single character;



determining whether said user input designates a re-map command; and



selecting said single character responsive to said input designating said single character; and



re-mapping said keys responsive to said input designating a re-map command;



wherein the step of selecting said single character includes:



inserting an alphanumeric character or symbol into the text stream; or



performing the function represented by the selected character representing said function;



wherein said character keys are further divided into a plurality of elements wherein said mapping step includes initially mapping single characters or character sub-arrays to particular elements; and wherein said re-map command includes receiving an input of a plurality of elements when single characters or character arrays are mapped to individual elements, or receiving an input of a particular element when character sub-arrays are mapped to individual elements; and wherein an input designating a single character includes an input of a particular element when a single character is mapped to said particular elements or an input of any number of elements on the same character key when a single character is mapped to said particular character key.



13. The method as claimed in claim 12 wherein said re-map command includes:



re-mapping said character keys with single characters responsive to an input of a plurality of elements on the same character key when first order character sub-arrays are mapped to particular character keys;



re-mapping said input keys with a single character, responsive to an input of a single element when second order character sub-arrays are mapped to particular character keys;



re-mapping said character keys with character sub-arrays of one order less responsive to an input of a plurality of elements when character sub-arrays of second order or greater are mapped to particular character keys;



re-mapping said character keys with character sub-arrays of two orders less responsive to an input of a single element when character sub-arrays of third order or greater are mapped to particular character keys; and



re-mapping said character keys with character arrays responsive to an assignment key input.



14. The method as claimed in claim 13 wherein the number of elements per character key is limited to the total number of character keys and wherein said re-map step includes re-mapping said character keys with the characters which are mapped to said selected character key, wherein each particular character key is re-mapped with the character whose position within said selected character key corresponds to the position of said character keys.

PatentNumber=6298057,What is claimed is:



1. A method for preparing an aural signal for transport across a network, comprising the steps of:



converting an aural signal into a data signal;



framing the data signal into plural packets;



providing forward error correction information in addition to the data signal in each of the packets, the forward error correction information for a given one of the packets comprising partial aural data corresponding to a previously transmitted one of the packets; and



sequencing the packets for transmission across a network.



2. The method of claim 1, wherein



the aural signal comprises a voice signal; and



wherein said converting step includes the steps of:



digitizing the voice signal; and



compressing the digitized voice signal into the data signal using linear predictive coding.



3. The method of claim 2, wherein the partial aural data comprises at least one of frame-to-frame predictive information and pitch information for at least one frame of the data signal present in the previously transmitted packet.



4. The method of claim 3, wherein the linear predictive coding includes ITU G.729 recommendation linear predictive coding.



5. A method for transporting an aural signal across a network, comprising the steps of:



the method of claim 1;



receiving the given packet; and



creating an approximation of at least one frame of the data signal present in the previously transmitted packet using the partial aural data of the forward error correction information of the received given packet.



6. The method of claim 5, further comprising the step of substantially reconstructing the aural signal using the received given packet and the created approximation of the least one frame of the data signal.



7. The method of claim 1, wherein the network comprises at least one of a local area network and a wide area network.



8. A method for transporting an aural signal across a packet-based network, comprising the steps of:



converting an aural signal into aural data;



framing the aural data into at least first and second packets;



providing forward error correction information in addition to the aural data in the at least first and second packets, the forward error correction information for the second packet comprising partial aural data corresponding to the first packet; and



sequentially transmitting the at least first and second packets across a packet-based network.



9. The method of claim 8, wherein



the aural signal comprises a voice signal; and



wherein said converting step includes the steps of:



digitizing the voice signal; and



compressing the digitized voice signal into the aural data using linear predictive coding.



10. The method of claim 9, wherein the partial aural data comprises at least one of frame-to-frame predictive information and pitch information for at least one frame of the aural data present in the first packet.



11. The method of claim 9, wherein the linear predictive coding includes ITU G.729 recommendation linear predictive coding.



12. The method of claim 8, further comprises the steps of:



receiving the second packet; and



recreating an approximation of at least one frame of the data signal present in the first packet using the partial aural data of the forward error correction information of the received second packet.



13. The method of claim 12, further comprising the step of substantially reconstructing the aural signal using the second packet and the created approximation of the least one frame of the data signal.



14. The method of claim 8, wherein the packet-based network comprises at least one of a local area network and a wide area network.



15. A system for preparing a voice signal for transmission across a packet-based network, comprising:



a voice unit for converting a voice signal into a data signal;



a framer coupled to said voice unit for framing the data signal into at least first and second packets; and



a voice enhancement unit coupled to said framer for providing forward error correction information in addition to the data signal in each of the packets, the forward error correction information for the second packet comprising partial aural data corresponding to the first packet.



16. The system of claim 15, further comprising a receiver for receiving the voice signal.



17. The system of claim 15, further comprising a transmitter coupled to said framer and said voice enhancement unit for sequentially transmitting the at least first and second packets across a packet-based network.



18. The system of claim 15, wherein said voice unit digitizes the voice signal and compresses the digitized voice signal into the data signal using linear predictive coding.



19. The system of claim 18, wherein the partial aural data comprises at least one of frame-to-frame predictive information and pitch information for at least one frame of the data signal present in the first packet.



20. The system of claim 19, wherein the linear predictive coding includes ITU G.729 recommendation linear predictive coding.



21. A system for transporting a voice signal across a packet-based network, comprising:



the system of claim 17;



means for receiving the second packet from the packet-based network; and



means for creating an approximation of at least one frame of the data signal present in the first packet using the partial aural data of the forward error correction information of the received second packet.



22. The system of claim 21, further comprising means for substantially reconstructing the aural signal using the received second packet and the created approximation of the least one frame of the data signal.



23. The system of claim 21, wherein the packet-based network comprises at least one of a local area network and a wide area network.



24. A data signal for bearing aural information across a packet-based network, the data signal being accessible by one or more nodes coupled to the packet-based network, the data signal comprising:



at least one frame of data representing aural information; and



forward error correction information in addition to the at least one frame of data comprising partial aural data corresponding to a previously transmitted data signal,



the forward error correction information useable by at least one of the nodes to create a frame corresponding to the previously transmitted data signal.



25. The data signal of claim 24, wherein



the aural information comprises voice; and



wherein said frame comprises a digitized portion of the voice compressed using linear predictive coding.



26. The data signal of claim 25, wherein the partial aural data comprises at least one of frame-to-frame predictive information and pitch information for at least one frame of the previously transmitted data signal.



27. The data signal of claim 26, wherein the linear predictive coding includes ITU G.729 recommendation linear predictive coding.



28. The method of claim 1, further comprising adjusting rate of transmission of the packets across the network in response to a traffic condition of the network.



29. The method of claim 28, further comprising eliminating a portion of the data signal in each packet to reduce the rate of transmission.



30. The method of claim 1, further comprising adding a time stamp to each packet.



31. The method of claim 30, further comprising determining if the packet is late based on the time stamp.



32. A method of transporting an aural signal across a data network, comprising:



receiving packets containing corresponding digitized data representing the aural signal, each packet further comprising forward error correction information including partial aural data corresponding to a previously transmitted one of the packets;



determining if a given packet is late or lost; and



recreating the aural signal corresponding to the late or lost packet using the partial aural data of the forward error correction information contained in a subsequent packet.



33. The method of claim 32, wherein determining if the given packet is late or lost is based on time stamps contained in the packets.



34. The method of claim 32, wherein determining if the given packet is late or lost is based on whether contents of a jitter buffer up to the lost packet have been used.



35. The method of claim 34, further comprising varying a size of the jitter buffer based on measured network delay.



36. The method of claim 34, further comprising discarding the given packet if the given packet later arrives.

PatentNumber=6310610,What is claimed is:



1. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



activating a function corresponding to the pointer size,



wherein the determining step includes the substep of: <determining the pointer size corresponding to a finger; and



wherein the activating step includes the substep of:



activating a navigation tool in response to the determined pointer size.



2. The method of claim 1, wherein the determining step further includes the substep of:



determining the pointer size corresponding to a pen, and



wherein the activating step further includes the substep of:



activating a draw function in response to the determined pointer size corresponding to a pen.



3. The method of claim 1, wherein the determining step further includes the substep of:



determining the pointer size corresponding to several fingers, and



wherein the activating step further includes the substep of:



activating a drag function in response to the determined pointer size corresponding to several fingers.



4. The method of claim 1, wherein the rate of change in the amount of pressure imposed by the object on the physical viewing area indicates that the amount of pressure changed gradually over a predetermined range of time.



5. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



activating a function corresponding to the pointer size,



wherein the determining step includes the substep of:



determining the pointer size corresponding to a pencil eraser; and



wherein the activating step includes the substep of:



activating an erase function in response to the determined pointer size.



6. The method of claim 5, wherein the rate of change in the amount of pressure imposed by the object on the physical viewing area indicates that the amount of pressure changed sharply over a predetermined range of time.



7. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



means for activating a function corresponding to the pointer size,



wherein the means for determining includes:



means for determining the pointer size corresponding to a finger; and



wherein the means for activating includes:



means for activating a navigation tool in response to the determined pointer size.



8. The apparatus of claim 7, wherein the determining means further includes:



means for determining the pointer size corresponding to a pen, and



wherein the activating means further includes



means for activating a draw function in response to the determined pointer size corresponding to a pen.



9. The apparatus of claim 7, wherein the determining means further includes:



means for determining the pointer size corresponding to several fingers, and



wherein the activating means further includes:



means for activating a drag function in response to the determined pointer size corresponding to several fingers.



10. The apparatus of claim 7, wherein the rate of change in the amount of pressure imposed by the object on the physical viewing area indicates that the amount of pressure changed gradually over a predetermined range of time.



11. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



means for activating a function corresponding to the pointer size,



wherein the means for determining includes:



means for determining the pointer size corresponding to a pencil eraser; and



wherein the means for activating includes:



means for activating an erase function in response to the determined pointer size.



12. The apparatus of claim 11, wherein the rate of change in the amount of pressure imposed by the object on the physical viewing area indicates that the amount of pressure changed sharply over a predetermined range of time.



13. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object; and



activating a function corresponding to the pointer size,



wherein the determining step includes the substeps of:



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area,



computing a centroid of the points of contact,



computing a standard deviation of the centroid, and



computing the pointer size based on the centroid and the standard deviation.



14. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object; and



means for activating a function corresponding to the pointer size,



wherein the determining means includes:



means for determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area,



means for computing a centroid of the points of contact,



means for computing a standard deviation of the centroid, and



means for computing the pointer size based on the centroid and the standard deviation.



15. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object, based on the amount of change in the pressure imposed by the object on the physical viewing area as a function of time; and



activating a function corresponding to the pointer size,



wherein the determining step includes the substeps of:



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



16. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object, based on the amount of change in the pressure imposed by the object on the physical viewing area as a function of time; and



means for activating a function corresponding to the pointer size,



wherein the means for determining includes:



means for determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



17. A system for providing a touch-responsive user interface comprising:



a touch screen device having a viewable area for receiving an object that makes contact with the viewable area;



a controller device connected to the touch screen device for detecting contact by the object on the viewable area and for generating at least 150 points of contact per second based on the detected contact;



a computer-readable medium storing a touch screen program; and



a processor connected to the controller device and computer-readable medium, for executing the touch screen program, wherein the touch screen program is configured, when executed by the processor, to perform the steps of:



determining points of contact of the object, using the points of contact generated by the controller device;



determining a rate of change in the amount of pressure imposed by the object on the physical viewing area;



computing a pointer size based on the rate of change in the amount of pressure.



18. A computer-readable medium containing instructions for providing a touch-responsive user interface, the instructions when executed by a processor, perform a method comprising the steps:



detecting an object making contact with a physical viewing area;



determining points of contact of the object, by using points of contact data, wherein the points of contact data are generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area;



determining a rate of change in the amount of pressure imposed by the object on the physical viewing area;



computing a pointer size based on the rate of change in the amount of pressure; and



activating a specific function corresponding to the pointer size.



19. A method for providing a touch-responsive user interface comprising:



scanning a physical viewing area for contact by an object;



detecting an object making contact with a physical viewing area;



generating contact points associated with the contact made by the object on the physical viewing area at a rate of 150 points per second;



determining points of contact of the object, using the generated contact points;



determining the amount of pressure imposed by the object on the viewable area;



determining the amount of time the object makes contact with the viewable area; and



determining a pointer size based on the determined amount of pressure as a function of the determined time.



20. A method for providing a touch-responsive user interface including a touch screen device comprising a physical viewing area, the method comprising the steps of:



presenting a first application tool on the physical viewing area;



presenting a second application tool on the physical viewing area, wherein the second application tool is superimposed on top of the first application tool;



detecting an object making contact on the physical viewing area, wherein the contact is located on the second application tool superimposed on top of the first application tool;



determining the pointer size of the object making contact on the physical viewing area;



activating either the first application tool or the second application tool, based on the determined pointer size of the object.



21. The method of claim 20 wherein the first application tool is a drawing tool, the method further comprising the steps of:



determining that the pointer size correlates to a stylus pointer; and



activating the first application tool based on the determination that the pointer correlates to a stylus pointer.



22. The method of claim 20, wherein the second application is a navigation tool, the method further comprising the steps of:



determining that the pointer size correlates to a finger; and



activating the second application tool based on the determination that the pointer correlates to a finger.



23. The method of claim 20, wherein the step of determining the pointer size of the object further includes the steps of:



determining the amount of pressure imposed by the object on the physical viewing area;



determining the amount of time the object makes contact with the physical viewing area; and



determining the pointer size of the object based on the amount of change in the pressure imposed by the object as a function of a range of time the object makes contact with the physical viewing area.



24. The method of claim 20, wherein the step of determining the pointer size of the object further includes the steps of:



determining points of contact of the object, by detecting at least 150 points of contact per second by the object on the viewing area,



computing a centroid of the points of contact,



computing a standard deviation of the centroid, and



computing the pointer size based on the centroid and the standard deviation.



25. A method for providing a touch-responsive user interface including a touch screen device comprising a physical viewing area, the method comprising the steps of:



presenting a first application tool on the physical viewing area;



presenting a second application tool on the physical viewing area, wherein the second application tool is superimposed on top of the first application tool;



detecting an object making contact on the physical viewing area, wherein the contact is located on the second application tool superimposed on top of the first application tool;



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area;



determining the amount of pressure imposed by the object on the physical viewable area;



determining the amount of time the object makes contact with the physical viewable area;



determining a pointer size of the object based on the determined amount of pressure as a function of the determined time; and



activating either the first application tool or the second application tool, based on the determined pointer size of the object.



26. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object; and



activating an application tool corresponding to the pointer size,



wherein the determining step includes the substeps of:



determining a rate of change in the amount of pressure imposed by the object on the physical viewing area;



computing a pointer size based on the rate of change in the amount of pressure.



27. The method of claim 26, wherein the step of determining a rate of change in the amount of pressure includes:



determining whether the pressure imposed by the object on the physical viewing area changes gradually or sharply over a predetermined range of time.



28. The method of claim 27, wherein the computing step includes:



associating the pointer size with a stylus pointer when the pressure imposed by the object changes sharply; and



associating the pointer size with a finger when the pressure imposed by the object changes gradually.



29. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object; and



means for activating an application tool corresponding to the pointer size,



wherein the means for determining includes:



means for determining a rate of change in the amount of pressure imposed by the object on the physical viewing area;



means for computing a pointer size based on the rate of change in the amount of pressure.



30. The apparatus of claim 29, wherein the means for determining a rate of change in the amount of pressure includes:



means for determining whether the pressure imposed by the object on the physical viewing area changes gradually or sharply over a predetermined range of time.



31. The apparatus of claim 30, Wherein the means for computing includes:



means for associating the pointer size with a stylus pointer when the pressure imposed by the object changes sharply; and



means for associating the pointer size with a finger when the pressure imposed by the object changes gradually.

PatentNumber=6340979,What is claimed is:



1. A method of providing a contextual user interface comprising the steps of:



ascertaining a current user application out of a plurality of applications;



detecting an object making contact with a physical viewing area;



determining which type of object, of a plurality of types of objects, has made contact with the physical viewing area by performing the substeps of:



determining a characteristic of the contact;



determining a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



computing a point size of the contact based on the rate of change in the amount of pressure, thereby determining which type of object of the plurality of types of objects has made contact with the physical viewing area,



and



activating a function corresponding to the contact characteristic, the type of object making contact, and the current user application.



2. The method of claim 1, wherein determining a characteristic of the contact includes:



determining a time period of contact.



3. The method of claim 1, wherein determining a characteristic of the contact includes:



determining the contact characteristic as a prolonged finger-sized object, and



wherein the activating step includes the substep of



activating a navigation tool.



4. The method of claim 1, wherein determining a characteristic of the contact includes:



determining the contact characteristic as a prolonged stylus-sized object, and



wherein the activating step includes the substep of



activating a drawing tool.



5. The method of claim 1, wherein the determining a characteristics of the contact step includes the substep of



determining the direction of movement of the contact.



6. The method of claim 1, wherein the determining a characteristics of the contact step includes the substep of



determining the speed of movement of the contact.



7. The method of claim 1, wherein when the current user application is a navigation application, the determining a characteristic of the contact step includes the substep of determining the contact characteristic as a quick drag, and



the activating step includes the substep of



activating a next page function.



8. The method of claim 7, wherein when the current user application is an editing application, the determining a characteristic of the contact step includes the substep of



determining the contact characteristic as a quick drag, and the activating step includes the substep of



highlighting a section of a document underlying the user input.



9. The method of claim 8, wherein when the current user application is a graphics application, the determining a characteristic of the contact step includes the substep of



determining the contact characteristic as a quick drag, and the activating step includes the substep of



drawing a line in a section of a document underlying the user input.



10. The method of claim 9, wherein when the current user application is a network browser application, the determining a characteristic of the contact step includes the substep of



determining the contact characteristic as a lingering touch, and the activating step includes the substeps of



enabling a graphical tool, and



disabling functions of underlying document.



11. The method of claim 1, wherein the detecting step includes the substeps of



measuring an analog voltage signal from the physical viewing area, and



converting the analog voltage signal to a digital value.



12. The method of claim 11, further including the step of



transmitting the digital value to a processor.



13. The method of claim 12, further including the step of



analyzing the digital value by the processor.



14. The method of claim 1, wherein the determining step includes the substeps of:



determining the amount of pressure imposed on the physical viewing area by the object;



determining a time period of contact; and



computing a point size of the contact based on the amount of pressure imposed on the physical viewing area as a function of the time.



15. The method of claim 1, wherein the computing a point size step includes determining points of contact of the object by using points of contact data, wherein the points of contact data is generated by a controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



16. The method of claim 1, wherein determining a rate of change in the amount of pressure imposed by the object on the physical viewing area includes:



determining whether the pressure imposed by the object on the physical viewing area changes gradually or sharply over a predetermined range of time.



17. An apparatus for providing a contextual user interface comprising:



means for ascertaining a current user application out of a plurality of applications;



means for detecting an object making contact with a physical viewing area;



means for determining which type of object, of a plurality of types of objects, has made contact with the physical viewing area, wherein the means for determining includes:



means for determining a characteristic of the contact;



means for determining a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



means for computing a point size of the contact based on the rate of change in the amount of pressure, thereby determining which type of object of the plurality of types of objects has made contact with the physical viewing area,



and



means for activating a function corresponding to the contact characteristic, the type of object making contact, and the current user application.



18. The apparatus of claim 17, wherein the means for determining a characteristic of the contact includes:



means for determining the time period of the contact.



19. The apparatus of claim 17, wherein the means for determining a characteristic of the contact includes:



means for determining the contact characteristic as a prolonged finger-sized object, and



wherein the activating means includes:



means for activating a navigation tool.



20. The apparatus of claim 17, wherein the means for determining a characteristic of the contact includes:



means for determining the contact characteristic as a prolonged stylus-sized object, and



wherein the activating means includes:



means for activating a drawing tool.



21. The apparatus of claim 17, wherein the means for determining a characteristic of the contact includes:



means for determining the direction of movement of the contact.



22. The apparatus of claim 17, wherein the means for determining a characteristic of the contact includes:



means for determining the speed of movement of the contact.



23. The apparatus of claim 17, wherein when the current user application is a navigation application, the means for determining a characteristic of the contact includes:



means for determining the contact characteristic as a quick drag, and



the activating means includes:



means for activating a next page function.



24. The apparatus of claim 23, wherein when the current user application is an editing application, the means for determining a characteristic of the contact includes:



means for determining the contact characteristic as a quick drag, and



the activating means includes:



means for highlighting a section of a document underlying the user input.



25. The apparatus of claim 24, wherein when the current user application is a graphics application, the means for determining a characterstic of the contract includes:



means for determining the contact characteristic as a quick drag, and the activating means includes:



means for drawing a line in a section of a document underlying the user input.



26. The apparatus of claim 25, wherein when the current user application is a network browser application, the means for determining a characteristic of the contact includes:



means for determining the contact characteristic as a lingering touch, and the activating means includes:



means for enabling a graphical tool, and



means for disabling functions of underlying document.



27. The apparatus of claim 17, wherein the detecting means includes



means for measuring an analog voltage signal from the physical viewing area, and



means for converting the analog voltage signal to a digital value.



28. The apparatus of claim 27, further including



means for transmitting the digital value to a processor.



29. The apparatus of claim 28, further including



means for analyzing the digital value.



30. The apparatus of claim 17, wherein the means for computing a point size includes means for determining point of contact of the object, wherein the means for determining points of contact of the object includes:



means for using points of contact data, wherein the points of contact data is generated by a controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



31. The apparatus of claim 17, wherein the means for determining a rate of change in the amount of pressure includes:



means for determining whether the pressure imposed by the object oil the physical viewing area changes gradually or sharply over a predetermined range of time.



32. A method of providing a contextual user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining characteristics of the contact, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



activating a function corresponding to the contact characteristics and current user task,



wherein the determining step includes:



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by a controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



33. An apparatus for providing a contextual user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining characteristics of the contact, based on a rate of change in the amount of pressure imposed by the object on the physical viewing area; and



means for activating a function corresponding to the contact characteristics and current user tasks,



wherein the means for determining includes:



means for determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by a controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area.



34. A method for providing a touch-responsive user interface including a touch screen device comprising a physical viewing area, the method comprising the steps of:



presenting a first application tool on the physical viewing area;



presenting a second application tool on the physical viewing area, wherein the second application tool is superimposed on top of the first application tool;



detecting an object making contact on the physical viewing area, wherein the contact is located on the second application tool superimposed on top of the first application tool;



determining the pointer size of the object making contact on the physical viewing area; and



activating either the first application tool or the second application tool, based on the determined pointer size of the object.



35. The method of claim 34, wherein the first application tool is a drawing tool, the method further comprising the steps of:



determining that the pointer size correlates to a stylus pointer; and



activating the first application tool based on the determination that the pointer correlates to a stylus pointer.



36. The method of claim 34, wherein the second application is a navigation tool, the method further comprising the steps of:



determining that the pointer size correlates to a finger; and



activating the second application tool based on the determination that the pointer correlates to a finger.



37. The method of claim 34, wherein the step of determining the pointer size of the object further includes the steps of:



determining the amount of pressure imposed by the object on the physical viewing area;



determining the amount of time the object makes contact with the physical viewing area; and



determining the pointer size of the object based on the amount of change in the pressure imposed by the object as a function of a range of time the object makes contact with the physical viewing area.



38. The method of claim 34, wherein the step of determining the pointer size of the object further includes the steps of:



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area;



computing a centroid of the points of contact,



computing a standard deviation of the centroid, and



computing the pointer size based on the centroid and the standard deviation.



39. The method of claim 34, wherein the step of determining the pointer size of the object further includes the steps of:



determining points of contact of the object, by using points of contact data, wherein the points of contact data is generated by an analog controller that generates at least 150 points of contact per second based on the contact made by the object on the physical viewing area;



determining the amount of pressure imposed by the object on the physical viewable area;



determining the amount of time the object makes contact with the physical viewable area; and



determining a pointer size based on the determined amount of pressure as a function of the determined time.



40. A method of providing a touch-responsive user interface comprising the steps of:



detecting an object making contact with a physical viewing area;



determining a pointer size of the object; and



activating a function corresponding to the pointer size,



wherein the determining step includes the substeps of:



determining a rate of change in the amount of pressure imposed by the object on the physical viewing area thereby determining whether the pressure imposed by the object on the physical viewing area changes gradually or sharply over a predetermined range of time; and



computing a pointer size based on the rate of change in the amount of pressure.



41. The method of claim 40, wherein the computing step includes:



associating the pointer size with a stylus pointer when the pressure imposed by the object changes sharply; and



associating the pointer size with a finger when the pressure imposed by the object changes gradually.



42. An apparatus for providing a touch-responsive user interface comprising:



means for detecting an object making contact with a physical viewing area;



means for determining a pointer size of the object; and



means for activating a function corresponding to the pointer size,



wherein the means for determining includes:



means for determining a rate of change in the amount of pressure imposed by the object on the physical viewing area, thereby determining whether the pressure imposed by the object on the physical viewing area changes gradually or sharply over a predetermined range of time; and



means for computing a pointer size based on the rate of change in the amount of pressure.



43. The apparatus of claim 42, wherein the means for computing includes:



means for associating the pointer size with a stylus pointer when the pressure imposed by the object changes sharply; and



means for associating the pointer size with a finger when the pressure imposed by the object changes gradually.

PatentNumber=6594822,We claim:



1. A method of creating a software patch by comparing a first object file of a first software program to a second object file of a second software program, the method comprising the steps of: decomposing said first object file and said second object file into respective constituent cantles; developing a first reduced program dependency graph for said first object file; developing a second reduced program dependency graph for said second object file; comparing said first reduced program dependency graph to said second reduced program dependency graph, wherein said comparing comprises: locating functions of said first reduced program dependency graph; locating functions of said second reduced program dependency graph; determining if functions of said first reduced program dependency graph are on a working stack; and comparing said functions of said second reduced program dependency graph to said functions of said first reduced program dependency graph if said functions of said first reduced program dependency graph are not on the working stack; determining the changes between said first reduced program dependency graph and said second reduced program dependency graph; and creating a patch comprised of said changes.



2. The method of claim 1 further comprising the step of examining fix-up information for each of said respective cantles.



3. The method of claim 1 wherein decomposing said first object file comprises grouping information into sections.



4. The method of claim 1 wherein decomposing said second object file comprises grouping information into sections; and further comprising determining if functions of said second reduced program dependency graph are on a working stack.



5. A method of creating a software patch by comparing code of a first software program to code of a second software program, the method comprising the steps of: compiling said code of said first software program and said code of said second software program to form a first object file and a second object file, respectively; decomposing said first object file and said second object file into respective constituent cantles; examining fix-up information for each of said respective cantles; developing a first reduced program dependency graph for said first object file; developing a second reduced program dependency graph for said second object file; comparing said first reduced program dependency graph and said second reduced program dependency graph to determine changes between said first reduced program dependency graph and said second reduced program dependency graph, wherein said comparing comprises: locating functions of said first reduced program dependency graph; locating functions of said second reduced program dependency graph; determining if functions of said first reduced program dependency graph are on a working stack; and comparing said functions of said second reduced program dependency graph to said functions of said first reduced program dependency graph if said functions of said first reduced program dependency graph are not on the working stack; and creating a patch comprised of said changes.



6. Apparatus for creating a software patch by comparing code of a first software program to code of a second software program, the apparatus comprising: means for compiling said code of said first software program and said code of said second software program to form a first object file and a second object file, respectively; means for decomposing said first object file and said second object file into respective constituent cantles; means for examining fix-up information for each of said respective cantles; means for developing a first reduced program dependency graph for said first object file; means for developing a second reduced program dependency graph for said second object file; means for comparing said first reduced program dependency graph and said second reduced program dependency graph to determine change between said first reduced program dependency graph and said second reduced program dependency graph, wherein said means for comparing comprises: means for locating functions of said first reduced program dependency graph; means for locating functions of said second reduced program dependency graph; means for determining if functions of said first reduced program dependency graph are on a working stack; and means for comparing said functions of said second reduced program dependency graph to said functions of said first reduced program dependency graph if said functions of said first reduced program dependency graph are not on the working stack; and means for creating a patch comprised of said changes.



7. A computer program produce for creating a software patch by comparing code of a first software program to code of a second software program, the computer program product having a medium with the computer program embodied thereon, the computer program comprising: computer program code for compiling said code of said first software program and said code of said second software program to form a first object file and a second object file, respectively; computer program code for decomposing said first object file and said second object file into respective constituent cantles; computer program code for examining fix-up information for each of said respective cantles; computer program code for developing a first reduced program dependency graph for said first object file; computer program code for developing a second reduced program dependency graph for said second object file; computer program code for comparing said first reduced program dependency graph and said second reduced program dependency graph to determine changes between said first reduced program dependency graph and said second reduced program dependency graph, wherein said computer program code for comparing comprises: computer program code for locating functions of said first reduced program dependency graph; computer program code for locating functions of said second reduced program dependency graph; computer program code for determining if functions of said first reduced program dependency graph are on a working stack; and computer program code for comparing said functions of said second reduced program dependency graph to said functions of said first reduced program dependency graph if said functions of said first reduced program dependency graph are not on the working stack; and computer program code for creating a patch comprised of said changes.



8. A computer system for creating a software patch by comparing code of a first software program to code of a second software program comprising: a processor for processing information; a RAM device for storing information and instructions for said processor; a ROM device for storing information and instructions for said processor; a bus connected to said processor, RAM and ROM devices for communicating with said processor, RAM and ROM devices; and computer program code for compiling said code of said first software program and said code of said second software program to form first and second object files; computer program code for decomposing said first and second object files into respective constituent cantles; computer program code for examining fix-up information for each of said respective cantles; computer program code for developing a first reduced program dependency graph for said first object file and a second reduced program dependency graph for said second object file; computer program code for comparing said first reduced program dependency graph and said second reduced program dependency graph and determining changes between said first reduced program dependency graph and said second reduced program dependency graph, wherein said computer program code for comparing comprises: computer program code for locating functions of said first reduced program dependency graph; computer program code for locating functions of said second reduced program dependency graph; computer program code for determining if functions of said first reduced program dependency graph are on a working stack; and computer program code for comparing said functions of said second reduced program dependency graph to said functions of said first reduced program dependency graph if said functions of said first reduced program dependency graph are not on the working stack; and computer program code for creating a patch comprised of said changes.



9. A method of creating a software patch by comparing a first software program to a second software program, comprising the steps of: compiling said first software program and said second software program to form respectively a first object file and a second object file; determining changes between said first object file and said second object file, wherein determining comprises: locating functions of said first software program; locating functions of said second software program; determining if said functions of are on a working stack; and comparing said functions of said second software program to said functions of said first software programs if said functions are not on the working stack; and creating a patch comprised of said changes.



10. Apparatus for creating a software patch by comparing a first software program to a second software program, the apparatus comprising: means for compiling said first software program and said second software program to form respectively a first object file and a second object file; means for determining changes between said first object file and said second object file, wherein said means for determining comprises: means for locating functions of said first software program; means for locating functions of said second software program; means for determining if said functions of are on a working stack; and means for comparing said functions of said second software program to said functions of said first software programs if said functions are not on the working stack; and means for creating a patch comprised of said changes.



11. A computer program product for creating a software patch by comparing a first software program to a second software program, the computer program product having a medium with the computer program embodied thereon, the computer program comprising: computer program code for compiling said first software program and said second software program to form respectively a first object file and a second object file; computer program code for determining changes between said first object file and said second object file, wherein said computer program code for determining changes comprises: computer program code for locating functions of said first software program; computer program code for locating functions of said second software program; computer program code for determining if said functions of are on a working stack; and computer program code for comparing said functions of said second software program to said functions of said first software programs if said functions are not on the working stack; and computer program code for creating a patch comprised of said changes.



12. A computer system operable to create a software patch by comparing a first software program to a second software program by performing the steps of: compiling said first software program and said second software program to form respectively a first object file and a second object file; determining changes between said first object file and said second object file, wherein said determining comprises: locating functions of said first software program; locating functions of said second software program; determining if said functions of are on a working stack; and comparing said functions of said second software program to said functions of said first software programs if said functions are not on the working stack; and creating a patch comprised of said changes.

PatentNumber=6631368,What is claimed is:



1. A method for operating on a non-text message, comprising: receiving said non-text message from a network; determining a message type for said received message; searching said received message for one or more signal samples having pre-defined characteristics by comparing one or more signal samples with said pre-defined characteristics, wherein said pre-defined characteristics correspond to said message type, and wherein said predetermined characteristics comprise a computer network address; and storing said address in a bookmark file.



2. A method for operating on a non-text message, comprising: receiving said non-text message from a network; determining a message type for said received message; searching said received message for one or more signal samples having pre-defined characteristics by comparing one or more signal samples with said pre-defined characteristics, wherein said pre-defined characteristics correspond to said message type, and wherein said predetermined characteristics comprise a computer network address; and sending said address to a browser for accessing a network resource at said address.

PatentNumber=6633564,We claim:



1. A method to interrupt an existing packet in transmission for transmitting an interrupting packet in a communication system where packets are each transmitted in the form of physical layer blocks, the physical layer blocks of each packet containing fields for previously defined purposes and being designed to be consecutively transmitted without interruption, the method comprising: transmitting one or more physical layer blocks for the existing packet; before completing the transmission of the existing packet, transmitting at least one physical layer block for the interrupting packet; denoting the presence of the interrupting packet in the physical layer block for the interrupting packet by using a value or combination of values in one or more existing fields located therein in a manner such that these fields are not used for the defined purposes; and resuming transmission of the existing packet.



2. The method of claim 1 wherein the step of denoting the presence of the interrupting packet comprises: denoting the presence of a new packet in the physical layer block for the interrupting packet; and denoting the new packet in the physical layer block for the interrupting packet as the interrupting packet.



3. The method of claim 2 wherein denoting the presence of the new packet in the physical layer block for the interrupting packet is done using at least one field of the one or more existing fields thereof.



4. The method of claim 3 wherein the at least one field is located in a header portion of the physical layer block for the interrupting packet.



5. The method of claim 3 wherein denoting the new packet in the physical layer block for the interrupting packet as the interrupting packet is done using at least one other field of the one or more existing fields thereof.



6. The method of claim 5 wherein the at least one other field is located in a payload portion of the physical layer block for the interrupting packet.



7. The method of claim 1 further comprising: for each new packet which needs to be transmitted, determining whether to treat it as an interrupting packet or to wait until completion of the existing packet.



8. The method of claim 2 wherein the physical layer block for the interrupting packet is a motion picture experts group (MPEG) block.



9. The method of claim 8 wherein a payload unit start indicator (PUSI) field is used for denoting the presence of the new packet in the physical layer block for the interrupting packet.



10. The method of claim 9 wherein for denoting the presence of the new packet in the physical layer block for the interrupting packet, the PUSI field is set to one.



11. The method of claim 10 wherein a pointer field is used for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet.



12. The method of claim 11 wherein the pointer field is located in a payload portion of the physical layer block for the interrupting packet.



13. The method of claim 12 wherein the defined purpose for the pointer field is to point to a predetermined range in the payload.



14. The method of claim 13 wherein for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet, the pointer field is set to a value outside of the predetermined range.



15. The method of claim 14 wherein for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet, the pointer field is set to a value of 255.



16. The method of claim 8 wherein a pointer field is used for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet.



17. The method of claim 16 wherein the pointer field is located in a payload portion of the physical layer block for the interrupting packet.



18. The method of claim 17 wherein the defined purpose for the pointer field is to point to a predetermined range in the payload.



19. The method of claim 18 wherein for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet, the pointer field is set to a value outside of the predetermined range.



20. The method of claim 19 wherein for denoting the new packet as the interrupting packet in the physical layer block for the interrupting packet, the pointer field is set to a value of 255.



21. The method of claim 1 wherein denoting the presence of the interrupting packet is done using the at least one field of the one or more existing fields thereof.



22. The method of claim 21 wherein the at least one field is located in a payload portion of the physical layer block for the interrupting packet.



23. The method of claim 22 wherein the physical layer block for the interrupting packet is an asynchronous transfer mode (ATM) adaptation layer 2 (AAL2) block.



24. The method of claim 23 wherein an offset field (OSF) is used for denoting the presence of the interrupting packet.



25. The method of claim 24 wherein the OSF is located in a payload portion of the physical layer block for the interrupting packet.



26. The method of claim 25 wherein the defined purpose for the OSF is to point to a predetermined range in the payload.



27. The method of claim 26 wherein for denoting the presence of the interrupting packet, the OSF is set to a value outside of the predetermined range.



28. The method of claim 27 wherein for denoting the presence of the interrupting packet, the OSF is set to a value of 63.



29. The method of claim 1 wherein the steps of: before completing the transmission of the existing packet, transmitting at least one physical layer block for the interrupting packet; denoting the presence of the interrupting packet in the physical layer block for the interrupting packet by using a value or combination of values in one or more existing fields located therein in a manner such that these fields are not used for the defined purposes; and resuming transmission of the existing packet are recursively repeated for nested interruptions.



30. The method of claim 1 further comprising denoting the presence of a second interrupting packet in the physical layer block for the first interrupting packet by using one or more other existing fields located therein.



31. The method of claim 30 wherein a continuation field is used for denoting the presence of the second interrupting packet.



32. The method of claim 31 wherein the continuation field is located in a payload portion of the physical layer block for the first interrupting packet after the first interrupting packet.



33. The method of claim 32 wherein for denoting the presence of the second interrupting packet in the physical layer block for the first interrupting packet, the continuation field is set to a non-zero value.



34. The method of claim 33 wherein the continuation field is set according to the number of interrupting packets which remain to be transmitted.



35. The method of claim 34 wherein for resuming transmission of the existing packet in the physical layer block for the first interrupting packet, the continuation field is set to zero.



36. A scheduler for interrupting an existing packet in transmission for transmitting an interrupting packet in a communication system where packets are each transmitted in the form of physical layer blocks, the physical layer blocks of each packet containing fields for previously defined purposes and being designed to be consecutively transmitted without interruption, the scheduler being connected for receiving packets which require transmission and comprising: means for transmitting one or more physical layer blocks for the existing packet; means for transmitting at least one physical layer block for the interrupting packet before completing the transmission of the existing packet; means for denoting the presence of the interrupting packet in the physical layer block for the interrupting packet by using a value or combination of values in one or more existing fields located therein in a manner such that these fields are not used for the defined purposes; and means for resuming transmission of the existing packet; wherein the scheduler is operable to determine for each packet received whether to treat it as an interrupting packet or to wait until completion of an existing packet.



37. The scheduler of claim 36 wherein the scheduler receives packets from a plurality of queues, each queue being associated with a particular transmission priority.



38. The scheduler of claim 37 wherein for determining whether to treat a packet received as an interrupting packet, the scheduler relies on the transmission priority associated with a queue containing the packet.



39. The scheduler of claim 36 also being operable to assemble physical layer blocks based on the packets received for transmission.



40. The scheduler of claim 39 further connected to a block header unit for obtaining proper header information for each physical layer block assembled.



41. The scheduler of claim 40 wherein for assembling physical layer blocks, the scheduler is further connected to a first buffer.



42. The scheduler of claim 41 wherein the first buffer is connected to a second buffer for storing each physical layer block assembled during transmission.

PatentNumber=6691282,We claim:



1. A method in a computer system, comprising: displaying a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently displaying a list of contents only of the lowest level containment group; wherein each containment group is a file folder; wherein said direct containment hierarchy is displayed in a first area and said list of contents is displayed in a second area.



2. A method according to claim 1 wherein said displaying list of contents is done scrollably.



3. A method according to claim 1 wherein said second area is displayed adjacent to or partially overlapping with the first area.



4. A method according to claim 1 further comprising: upon entry of a search criterion, searching the list of contents for any listings which match the search criterion and displaying any such listing.



5. A method according to claim 1 further comprising: displaying a pictorial representation of the list of contents.



6. A method according to claim 5 wherein the pictorial representation is a map.



7. A method according to claim 6 wherein said map is a geographical map.



8. A method according to claim 5 wherein said pictorial representation includes a pictorial element for each listing in said list of contents.



9. A method according to claim 1 further comprising displaying said list of contents m a manner which distinguishes between various types of contents.



10. A method according to claim 9 wherein said various types of contents comprise file folders and files.



11. A method according to claim 9 wherein displaying the direct containment hierarchy comprises displaying a sequence of nth file folders, wherein n-1, . . . , K, where K is the containment depth of the lowest-level file folder, where for any n the nth file folder is a file folder which directly contains the (n-1)th file folder.



12. A method according to claim 1 wherein displaying the direct containment hierarchy comprises displaying a list inclusively containing only file folders which directly or indirectly contain the lowest-level file folders.



13. A method according to claim 1 wherein said one of said containment groups is user selectable.



14. A method according to claim 1 further comprising: upon temporary selection of a direct containment group in the direct containment hierarchy, temporarily displaying the contents of the temporarily selected containment group without updating the direct consent hierarchy.



15. A method according to claim 1 further comprising: upon selection of a selected containment group in the direct containment hierarchy, modifying the direct containment hierarchy to extend down to the selected containment group; displaying the contents of the selected containment group in place of the list of contents.



16. A method in a computer system, comprising: displaying a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently displaying a list of contents only of the lowest level containment group; wherein each containment group is a file folder; the method further comprising: upon selection of a child file folder in the list of contents of the lowest-level folder, in place of the previous direct containment hierarchy displaying a new direct containment hierarchy which includes the newly selected child file folder; displaying the contents of the newly selected child file folder in place of the list of contents.



17. A method in a computer system, comprising: displaying a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently displaying a list of contents only of the lowest level containment group; the method further comprising: displaying a pictorial representation of the list of contents; wherein said pictorial representation includes a pictorial element for each listing in said list of contents; wherein upon a user identifying a particular pictorial element in the display, the method alters We display of that particular pictorial element to highlight the fact that it has been indicated, and a corresponding listing in the list of contents is moved to the top of the list of contents.



18. A method in a computer system, comprising: displaying a first direct containment hierarchy based on a first containment hierarchy, the first containment hierarchy having at least two hierarchical containment groups of at least two containment levels, one of the hierarchical containment groups being a lowest level containment group; concurrently with displaying the first direct containment hierarchy, displaying a list of contents only of the lowest level containment group in said fit direct containment hierarchy; receiving an input indicating to change to a second containment hierarchy; displaying in place of said first direct containment hierarchy a second direct containment hierarchy based on the second containment hierarchy, containment hierarchy having at least two hierarchical containment groups of at least two containment levels, one of the hierarchical containment groups being a lowest level containment group; concurrently with displaying the second direct containment hierarchy, displaying a list of contents only of the lowest level containment group in said second direct containment hierarchy.



19. A method according to claim 18 further comprising: setting the lowest-level containment group in said second direct containment hierarchy to contain a selected containment entity in the lowest-level containment group in said first direct containment hierarchy.



20. A system comprising: a processing platform connected to a storage device and a display; the system being adapted to: display a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently display a list of contents only of the lowest level containment group; wherein each containment group is a file folder; wherein said direct containment hierarchy is displayed in a first area and said list of contents is displayed in a second area.



21. A graphical user interface adapted to: display a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently display a list of contents only of the lowest level containment group; wherein each containment group is a file folder; wherein said direct containment hierarchy is displayed in a first area and said list of contents is displayed in a second area.



22. An operating system adapted to: display a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently display a list of contents only of the lowest level containment group; wherein each containment group is a file folder; wherein said direct containment hierarchy is displayed in a first area and said list of contents is displayed in a second area.



23. A computer readable medium having computer executable code stored thereon for implementing a method comprising: display a direct containment hierarchy having hierarchical containment groups of at least two containment levels one of the hierarchical containment groups being a lowest level containment group; and concurrently display a list of contents only of the lowest level containment group; wherein each containment group is a file folder; wherein said direct containment hierarchy is displayed in a first area and said list of contents is displayed in a second area.



24. A method in a computer system, comprising: displaying a direct containment hierarchy having hierarchical containment groups of at least two content levels one of the hierarchical containment groups being a lowest level containment group; and concurrently displaying a list of contents only of the lowest level containment group; the method further comprising: displaying a pictorial representation of the list of contents; wherein said pictorial representation includes a pictorial element for each listing in said list of contents; the method further comprising: upon selection of a particular pictorial element, in place of the previous direct containment hierarchy displaying a new direct containment hierarchy which includes the child file folder corresponding with the particular pictorial element; displaying the contents of the child file folder corresponding with the particular pictorial element in place of the list of contents.

PatentNumber=7092934,What is claimed is:



1. A computer implemented method of associating search information with an object in a file of an electronic calendar, the method comprising: a) storing an object associated with a calendar entry in a file of an electronic calendar; b) associating a search key with the object, in said file by tagging the object with a tag; c) scheduling a search for said search information using said search key to search resources other than the file of the electronic calendar, for automatic execution at a pre-scheduled time by a searching mechanism; d) initiating a pre-scheduled search by said searching mechanism, at said pre-scheduled time to produce a search result in response to said search key; e) associating said search result with said tag, in said file; and f) modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



2. The computer implemented method claimed in claim 1 wherein tagging the object comprises associating a label with the object.



3. The computer implemented method claimed in claim 2 wherein associating a label comprises inserting said tag adjacent a string of text in a document.



4. The computer implemented method claimed in claim 1 wherein scheduling comprises storing said search key and a time of execution at which said search is to be executed in association with each other.



5. The computer implemented method claimed in claim 1 wherein scheduling comprises storing said search key in association with a time of execution at which said search is to be executed and in association with a tag identifying said object.



6. The computer implemented method of claim 1 wherein associating said search result with said tag comprises providing a hyperlink for accessing and displaying said search results.



7. A recording medium readable by a computer, tangibly embodying a program of instructions executable by said computer to perform a method of associating search information with an object in a file of an electronic calendar, the method comprising the steps to: a) store an object associated with a calendar entry in a file of an electronic calendar; b) associate a search key with an object, in a file by tagging the object with a tag; c) schedule a search for information using said search key to search resources other than the file of the electronic calendar, for automatic execution at a pre-scheduled time by a searching mechanism; d) initiate a prescheduled search by said searching mechanism, at said pre-scheduled time to produce a search result in response to said search key; e) associate said search result with said tag, in said file; and f) modify contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



8. An apparatus for associating information with an object in a file, the apparatus comprising: a) means for storing an object associated with a calendar entry in a file of an electronic calendar; b) means for associating a search key with the object, in said file by tagging the object with a tag; c) means for scheduling a search for said information using said search key to search resources other than the file of the electronic calendar, for automatic execution at a pre-scheduled time by a searching mechanism; d) means for initiating a pre-scheduled search by said searching mechanism, at said pre-scheduled time to produce a search result in response to said search key; e) means for associating said search result with said tag, in said file; and f) means for modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



9. An apparatus for associating search information with an object associated with a calendar entry in a file of an electronic calendar, the apparatus comprising: a scheduler operable to schedule a search for said information, said scheduler including: a component for storing the object in said file and for associating a search key and a time of execution with the object, in the file by tagging the object with a tag; and an executor operable to automatically initiate a pre-scheduled search for said information, at said time of execution, said executor including: a component for communicating with a search engine configured to search a resource other than said file of the electronic calendar at said time of execution to effect said pre-scheduled search in response to said search key and to receive a search result from said search engine; a component for associating said search result with said tag, in said file; and a component for modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



10. The apparatus claimed in claim 9 wherein said scheduler is operable to associate a label with the object.



11. The apparatus claimed in claim 10 wherein said scheduler is operable to insert said tag adjacent a string of text in a document.



12. The apparatus claimed in claim 9 wherein said scheduler comprises memory and wherein said scheduler is operable to store said search key and a time of execution at which said search is to be executed in association with each other.



13. The apparatus claimed in claim 9 wherein said scheduler is operable to store said search key in association with a time of execution at which said search is to be executed and in association with a tag identifying said object.



14. The apparatus of claim 9 wherein said component for associating said search result with said tag comprises a hyperlink for accessing and displaying said search results.



15. A computer implemented method of associating information with an object associated with a calendar entry in a file of an electronic calendar, the method comprising: a) initiating a search for said information through a resource other than said file of the electronic calendar, using a search key and an associated time of execution associated with said object by a tag associated with the object in said file; b) associating with said tag a result of said search; and c) modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



16. The computer implemented method claimed in claim 15 wherein initiating comprises invoking a search when, or after said time of execution occurs.



17. The computer implemented method claimed in claim 16 wherein invoking a search comprises invoking a search engine.



18. The computer implemented method claimed in claim 17 wherein invoking a search engine comprises addressing a universal resource locator (URL) associated with said search engine.



19. The computer implemented method claimed in claim 18 wherein invoking said search comprises running scripts to populate search engine fields of the search engine.



20. The computer implemented method claimed in claim 15 further comprising associating with the object a hyperlink pointing to said one or more ULR links, where said one or more URL links are results URL.



21. The computer implemented method claimed in claim 20 further comprising producing a table associating said tag, said search key, said time of execution, said URL associated with said search and said results URL with each other.



22. The computer implemented method of claim 15 wherein associating said result of said search with said tag comprises providing a hyperlink for accessing and displaying said search results.



23. A recording medium readable by a computer, tangibly embodying a program of instructions executable by said computer to perform a method of associating search information with an object in a file of an electronic calendar, the method comprising the steps to: a) initiate a search for information through a resource other than said file of the electronic calendar, using a search key and an associated time of execution associated with an object in a file by a tag associated with the object in said file; and b) associate with said tag a result of said search; and c) modify contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



24. A computer apparatus for associating information with an object associated with a calendar entry in a file of an electronic calendar, the apparatus comprising: a) means for initiating a search for said information through a resource other than said file of the electronic calendar, using a search key and an associated time of execution associated with said object by a tag associated with the object in said file; and b) means for associating with said tag a result of said search; and c) modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



25. A computer apparatus for associating search information with an object associated with a calendar entry in a file of an electronic calendar, the apparatus comprising: a search executor for initiating a search for said information through a resource other than said file of the electronic calendar, using a search key and an associated time of execution associated with said object by a tag associated with the object in said file, for associating with said tag a result of said search, and for modifying contents of said file of said electronic calendar by inserting a copy of a hypertext markup language (HTML) file corresponding to one or more uniform resource locator (URL) links to said tag associated with said search result into said file of said electronic calendar.



26. The computer apparatus claimed in claim 25 wherein said search executor is operable to invoke a search when, or after said time of execution occurs.



27. The computer apparatus claimed in claim 26 wherein said search executor is operable to invoke a search engine.



28. The computer apparatus claimed in claim 27 wherein said search executor is operable to address a universal resource locator (URL) associated with said search.



29. The computer apparatus claimed in claim 28 wherein said search executor is operable to run scripts to populate search engine fields of the search engine.



30. The computer apparatus claimed in claim 28 wherein said one or more URL links are results URL associated with results of said search.



31. The computer apparatus claimed in claim 30 wherein said search executor comprises memory and wherein said search executor is operable to store said results URL in association with said search.



32. The computer apparatus claimed in claim 31 wherein said search executor is operable to associate with the object a hyperlink pointing to said results URL.



33. The computer apparatus claimed in claim 32 wherein said search executor is operable to produce a table associating said object tag, said search key, said time of execution, said URL associated with said search and said results URL with each other.



34. The computer apparatus of claim 25 further comprising means for providing a hyperlink for accessing and displaying said search results.

PatentNumber=7127526,What is claimed is:



1. A method for performing a service on a network device, comprising the steps of: loading the service on the network device from another location, the service having a corresponding set of service relationships, wherein the loading includes downloading a file corresponding to the service and containing program code operable to perform the service; checking the service relationships of the loaded service against a stored service registry, wherein the service registry includes indications of services and indications of dependencies of services on other services, and wherein the checking the service relationships of the loaded service includes determining whether all other services the loaded service depends on are available; and causing the service to be executed on the network device only if all other services the loaded service depends on are determined to be available.



2. A method according to claim 1, further comprising the step of: updating the stored service registry with information corresponding to the executed service.



3. A method according to claim 1, wherein the step of causing the service to be executed includes the step of providing instructions corresponding to the service to a virtual machine that is ported to the network device.



4. A method according to claim 1, further comprising the step of: causing another service to be executed on the network device in accordance with a result of the step of checking the service relationships.



5. A method according to claim 1, wherein the network device is one of a router, a switch, and a hub.



6. A method according to claim 5, wherein the service comprises accessing a MIB on the network device.



7. A method according to claim 1, wherein the network device comprises a packet switching fabric.



8. A method according to claim 7, wherein the network device comprises a control plane and a forwarding plane including the packet switching fabric, the loading, checking and causing steps being performed in the control plane without interruption of the forwarding plane.



9. A method according to claim 8, further comprising the step of interfacing with embedded hardware and software to cause forwarding rules referred to by the packet switching fabric to be adjusted.



10. A method according to claim 7, wherein the service comprises accessing a MIB on the network device.



11. A method according to claim 1, further comprising the step of: communicating with a remote client to receive an identifier corresponding to the service to be performed.



12. A method according to claim 11, wherein the another location corresponds to an application server that stores a plurality of services, and wherein the identifier comprises a URL pointing to the application server.



13. A method according to claim 12, wherein the step of loading includes the step of downloading the file corresponding to the service from the application server in accordance with the URL.



14. A method according to claim 13, wherein the step of downloading includes the step of communicating with the application server using the HTTP protocol.



15. A method according to claim 1, wherein the another location corresponds to an application server that stores a plurality of services.



16. A method according to claim 11, wherein the step of communicating includes the step of providing a telnet interface that allows the remote client to provide the identifier in association with a predefined command requesting the service to be performed.



17. A method according to claim 1, further comprising the step of interfacing with embedded hardware and software to perform tasks associated with the service.



18. A network device, comprising means for loading a service on the network device from another location, the service having a corresponding set of service relationships, wherein the loading includes downloading a file corresponding to the service and containing program code operable to perform the service; means for checking the service relationships of the loaded service against a stored service registry, wherein the service registry includes indications of services and indications of dependencies of services on other services, and wherein the checking the service relationships of the loaded service includes determining whether all other services the loaded service depends on are available; and means for causing the service to be executed on the network device only if all other services the loaded service depends on are determined to be available.



19. A network device according to claim 18, further comprising: means for updating the stored service registry with information corresponding to the executed service.



20. A network device according to claim 18, wherein the means for causing the service to be executed includes means for providing instructions corresponding to the service to a virtual machine that is ported to the network device.



21. A network device according to claim 18, further comprising: means for causing another service to be executed on the network device in accordance with a result from the means for checking the service relationships.



22. A network device according to claim 18, wherein the network device is one of a router, a switch, and a hub.



23. A network device according to claim 22, wherein the service comprises accessing a MIB on the network device.



24. A network device according to claim 18, wherein the network device comprises a packet switching fabric.



25. A network device according to claim 24, wherein the network device comprises a control plane and a forwarding plane including the packet switching fabric, the means for loading, means for checking and means for causing being operable in the control plane without interruption of the forwarding plane.



26. A network device according to claim 25, further comprising means for interfacing with native hardware and software to cause forwarding rules referred to by the packet switching fabric to be adjusted.



27. A network device according to claim 24, wherein the service comprises accessing a MIB on the network device.



28. A network device according to claim 18, further comprising: means for communicating with a remote client to receive an identifier corresponding to the service to be performed.



29. A network device according to claim 28, wherein the another location corresponds to an application server that stores a plurality of services, and wherein the identifier comprises a URL pointing to the application server.



30. A network device according to claim 29, wherein the means for loading includes means for downloading the file corresponding to the service from the application server in accordance with the URL.



31. A network device according to claim 30, wherein the mean for downloading includes means for communicating with the application server using the HTTP protocol.



32. A network device according to claim 28, wherein the means for communicating includes means for providing a telnet interface that allows the remote client to provide the identifier in association with a predefined command requesting the service to be performed.



33. A network device according to claim 18, wherein the another location corresponds to an application server that stores a plurality of services.



34. A network device according to claim 18, further comprising means for interfacing with native hardware and software to perform tasks associated with the service.



35. A network device for locally performing a service, comprising: a network interface adapted to load the service on the network device from another location, by downloading a file corresponding to the service and containing program code operable to perform the service, the service having a corresponding set of service relationships; a service registry, wherein the service registry includes indications of services and indications of dependencies of services on other services; a service manager coupled to the network interface and the service registry that is adapted to check the service relationships of the loaded service against the service registry, wherein the checking the service relationships of the loaded service includes determining whether all other services the loaded service depends on are available; and a service launcher coupled to the service manager that is adapted to cause the service to be executed on the network device only if all other services the loaded service depends on are determined to be available.



36. A network device according to claim 35, wherein the network device is one of a router, a switch, and a hub.



37. A network device according to claim 35, further comprising a packet switching fabric.



38. A network device according to claim 37, further comprising: a control plane including the network interface, the service registry, the service manager and the service launcher; and a forwarding plane including the packet switching fabric, the network interface, the service manager and the service launcher being operable in the control plane without interruption of the forwarding plane.



39. A network device according to claim 38, further comprising API extensions through which the service interfaces with native hardware and software to cause forwarding rules referred to by the packet switching fabric to be adjusted.



40. A network device according to claim 35, wherein the network interface is further adapted to communicate with a remote client to receive an identifier corresponding to the service to be performed.



41. A network device according to claim 40, wherein the network interface includes a telnet interface that allows the remote client to provide the identifier in association with a predefined command requesting the service to be performed.



42. A network device according to claim 35, further comprising API extensions through which the service interfaces with native hardware and software to perform tasks associated with the service.



43. A network device for locally performing a service, comprising: a control plane including: an embedded CPU and operating system, a service environment ported to the embedded CPU and operating system, the service environment having: a network interface adapted to load the service on the network device from another location, by downloading a file corresponding to the service and containing program code operable to perform the service, the service having a corresponding set of service relationships, a service registry, wherein the service registry includes indications of services and indications of dependencies of services on other services, a service manager coupled to the network interface and the service registry that is adapted to check the service relationships of the loaded service against the service registry, wherein the checking the checking the service relationships of the loaded service includes determining whether all other services the loaded service depends on are available, and a service launcher coupled to the service manager that is adapted to cause the service to be executed on the network device only if all other services the loaded service depends on are determined to be available, and a forwarding plane including a packet switching fabric, the service environment being operable in the control plane without interruption of the forwarding plane.



44. A method for updating one of a plurality of functionalities of a network device, comprising the steps of: providing a service environment that executes in a runtime environment of the network device; providing code corresponding to the updated one of the functionalities to the service environment from another location on a network coupled to the network device by downloading a file corresponding to the service and containing program code operable to perform the service; providing header information indicating relationships required by the updated one of the functionalities to the service environment; checking the relationships required by the updated one of the functionalities against a stored service registry, wherein the service registry includes indications of services and indications of dependencies of services on other services, wherein the checking the relationships required by the updated one of the functionalities includes determining whether all services required by the updated one of the functionalities are available; and executing the code corresponding to the updated one of the functionalities only if all other services required by the updated one of the functionalities are determined to be available.

PatentNumber=7308279,What is claimed is:



1. A method comprising: transmitting a signal having a first level of effective isotropic radiated power by a first wireless electronic device; reducing a level of effective isotropic radiated power to a second level of effective isotropic radiated power in accordance with a logarithmic function when a response to the signal is received by the first wireless electronic device within a predetermined period of time; and increasing the level of effective isotropic radiated power to a third level of effective isotropic radiated power in accordance with a non-logarithmic function.



2. The method of claim 1 further comprising: after reducing of the level of effective isotropic radiated power to the second level of effective isotropic radiated power, increasing a level of effective isotropic radiated power to a fourth level of effective isotropic radiated power if no response to the signal is received by the first wireless electronic device within the predetermined period of time.



3. The method of claim 2, wherein the fourth level of effective isotropic radiated power is greater than the second level and less than the first level.



4. The method of claim 1, wherein the first wireless electronic device is an access point.



5. The method of claim 1 further comprising: increasing a level of effective isotropic radiated power to the third level of effective isotropic radiated power if no response to the signal is received by the first wireless electronic device within the predetermined period of time and after a predetermined number of retries.



6. The method of claim 1, wherein the response to the signal is a beacon from a second wireless electronic device.



7. The method of claim 6, wherein the second wireless electronic device is an access point.



8. The method of claim 1, wherein the response to the signal is a message from a second wireless electronic device.



9. A method comprising: transmitting a signal having a first level of effective isotropic radiated power by a first wireless electronic device; reducing a level of effective isotropic radiated power to a second level of effective isotropic radiated power when a response to the signal is received by the first wireless electronic device within a predetermined period of time; increasing a level of effective isotropic radiated power to a third level of effective isotropic radiated power if no response to the signal is received by the first wireless electronic device within the predetermined period of time, wherein a rate of change from the first level of effective isotropic radiated power to the second level of effective isotropic radiated power is greater than a rate of change from the second level of effective isotropic radiated power to the third level of effective isotropic radiated power.



10. A method comprising: receiving a signal from a first wireless electronic device; determining a power level of the signal; comparing the power level to determined power levels stored within entries of a conversion table, the conversion table including a plurality of entries associated with determined power levels and a plurality of entries associated with suggested power levels, each suggested power level corresponding to one of the determined power levels; setting the power level of the signal to a first suggested power level of the suggested power levels corresponding to a first determined power level of the determined power levels when the power level matches the first determined power level; and maintaining the power level of the signal if the power level fails to match any power level of a first group of the predetermined power levels.



11. The method of claim 10, wherein the setting of the power level includes increasing the power level of the signal if the first suggested power level is greater than the first determined power level.



12. The method of claim 10, wherein the setting of the power level includes decreasing the power level of the signal if the first suggested power level is less than the first determined power level.



13. A method comprising: detecting a beacon from a neighboring access point by access point; determining a power level of the beacon; decreasing a power level for transmission of signals from the access point upon detecting that the power level of the beacon is greater than a predetermined power level threshold; and periodically transmitting beacons from the access point at a designated power level greater than the power level to enable other neighboring access points to assess channel conditions.



14. The method of claim 13 further comprising: maintaining maximum power levels of received beacons from neighboring access points including the neighboring access point.



15. The method of claim 13, wherein the designated power level is a full power transmission level.

PatentNumber=7339892,The invention claimed is:



1. A method of automatically adjusting a fragmentation threshold for data transmissions between an access point and one or more associated wireless units, comprising: determining a transmission error factor indicative of errors occurring in a transmission of one or more data packets between the access point and the one or more associated wireless units; and automatically adjusting the fragmentation threshold based on the transmission error factor by changing the fragmentation threshold by a divisional factor each time the fragmentation threshold is adjusted, the fragmentation threshold being based on a pre-determined fragmentation threshold divided by the divisional factor.



2. The method of claim 1, wherein the determining of the transmission error factor comprises: transmitting the one or more data packets; and determining the transmission error factor based on a number of acknowledgement packets received in response to the transmitted one or more data packets.



3. The method of claim 1, wherein the transmission error factor is based on a number of errors occrurring in the transmission of the one or more data packets.



4. The method of claim 1, wherein the transmission error factor is a value based on (i) a number of transmission errors occurring successively multiplied by a first weighting factor and (ii) a number of transmission errors occrurring sporadically multiplied by a second weighting factor, the first weighting factor being greater than the second weighting factor.



5. The method of claim 1, wherein the pre-determined fragmentation threshold is a maximum data packet size for transmission over a backbone network of a wireless network formed by the access point and the one or more associated wireless units.



6. The method of claim 5, wherein the pre-determined fragmentation threshold is related to a maximum data packet size for transmission over a wireless medium operating as a wireless communication path between the access point and the one or more associated wireless units.



7. Adapted to communicate with one or more associated wireless units, an access point comprising: an address table; and a logic circuit in communication with the address table, the logic circuit to: determine a transmission error factor indicative of errors occurring in a transmission of a first group of data packets to the one or more associated wireless units, the transmission error factor being a weighted value with transmission errors occrurring successively having a different weighting than transmission errors experienced by the first group of data packets occurring sporadically; and automatically adjust the fragmentation threshold based on the transmission error factor after translating a desired finite time duration for the transmission into the fragmentation threshold based of a data transmission rate of a second group of data packets following the first group of data packets, the fragmentation threshold is based on a pre-determined fragmentation threshold divided by a divisional factor and is adjusted by the divisional factor each time the fragmentation threshold is adjusted.



8. The access point of claim 7, wherein the logic circuit in determining the transmission error factor is capable of: transmitting the first group of data packets to the one or more associated wireless units; and determining the transmission error factor based on a number of acknowledgement packets received in response to the transmitted the first group of data packets from the one or more associated wireless units.



9. The access point of claim 7, wherein the transmission error factor depends on a number of errors occurring in the transmission of the first group of data packets.



10. The access point of claim 7, wherein the transmission error factor is a value based on (i) a number of transmission errors occurring successively for the first grouped of data packets multiplied by a first weighting factor and (ii) a number of transmission errors occurring sporadically for the first group of data packets multiplied by a second weighting factor.



11. The access point of claim 7, wherein the transmission error factor is a weighted value with the transmission errors occurring successively having a greater weighting than transmission errors experienced by the first group of data packets occurring sporadically.



12. The access point of claim 7, wherein the logic circuit in automatically adjusting the fragmentation threshold is capable of: comparing the transmission error factor to an upper threshold; and decreasing the finite time duration by decreasing the fragmentation threshold if the transmission error factor is above the upper threshold.



13. The access point of claim 7, wherein the logic circuit in automatically adjusting the fragmentation threshold is capable of: comparing the transmission error factor to a lower threshold; and increasing the finite time duration by increasing the fragmentation threshold if the transmission error factor is below the lower threshold.



14. The access point of clam 7, wherein the pre-determined fragmentation threshold is a maximum data packet size for transmission over a backbone network of a wireless network formed by the access point and the one or more associated wireless units.



15. A method of automatically adjusting a fragmentation threshold for data transmissions between an access point and at least one wireless unit, comprising: determining a transmission error factor indicative of errors occurring in a transmission of one or more data packets between the access point and the at least one wireless unit, the transmission error factor being a weighted value with transmission errors occurring successively having a different weighting than transmission errors experienced by a first group of data packets occrurring sporadically; and adjusting the fragmentation threshold based on the transmission error factor after translating a desired finite time duration for the transmission into the fragmentation threshold based of a transmission rate of at least one data packet following the one or more data packets, the fragmentation threshold is a pre-determined fragmentation threshold divided by a divisional factor and is adjusted by the divisional factor each time the fragmentation threshold is adjusted.



16. The method of claim 15, wherein the determining of the transmission error factor comprises: transmitting the one or more data packets; and determining the transmission error factor based on a number of acknowledgment packets received in response to the transmitted one or more data packets.



17. The method of claim 15, wherein the transmission error factor is based on a number of errors occrurring in the transmission of the one or more data packets.



18. The method of claim 15, wherein the transmission error factor is a value based on (i) a number of transmission errors occurring successively multiplied by a first weighting factor and (ii) a number of transmission errors occurring sporadically multiplied by a second weighting factor, the first weighting factor being greater than the second weighting factor.



19. The method of claim 15, wherein the transmission error factor is a weighed value with transmission errors occurring successively to each other having a greater weighting than transmission errors occurring sporadically.



20. The method of aim 15, wherein automatically adjusting the fragmentation threshold comprises: comparing the transmission error factor to an upper threshold; and decreasing the finite time duration by decreasing the fragmentation threshold if the transmission error factor is above the upper threshold.



21. The method of claim 15, wherein automatically adjusting the fragmentation threshold comprises: comparing the transmission error factor to a lower threshold; and increasing the finite time duration by increasing the fragmentation threshold if the transmission error factor is below the lower threshold.



22. The method of claim 15, wherein the pre-determined fragmentation threshold is a maximum data packet size for transmission over a backbone network of a wireless network formed by the access point and the one or more wireless units.



23. An access point, adapted to communicate with at least one wireless unit via a wireless medium to provide the at least one wireless unit access to a wireless network, comprising: a wireless transceiver; and a logic circuit coupled to the wireless transceiver, the logic unit to (i) determine a transmission error factor indicative of errors occurring in a transmission of one or more data packets between the access point and the at least one wireless unit, the transmission error factor being a weighted value with transmission errors occurring successively having a different weighting than transmission errors experienced by a first group of data packets occrurring sporadically, and (ii) adjust the fragmentation threshold based on the transmission error factor after translating a desired finite time duration for the transmission into the fragmentation threshold based of a transmission rate of at least one data packet following the one or more data packets, the fragmentation threshold, being based on a pre-determined fragmentation threshold divided by a divisional factor, is adjusted by changing the divisional factor each item the fragmentation threshold is adjusted.



24. The access point of claim 23, wherein the logic circuit to determine the transmission error factor by computing a weighted value with transmission errors occurring successively having a greater weighting than transmission errors experienced by the one or more packets occurring sporadically.

